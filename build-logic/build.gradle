import org.gradle.util.GradleVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath platform("org.ow2.asm:asm-bom:9.7.1")
        classpath 'org.ow2.asm:asm-tree'
    }
    repositories {
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.ext['javaGradlePluginWithoutPublish'] = true

apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.generate-sources'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

afterEvaluate {
    tasks.matching { isVerificationTask(it) }.configureEach {
        if (project.javaRuntimeVersion != JavaVersion.current()
            || project.gradleApiVersion != GradleVersion.current()
        ) {
            disableTask(it)
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dependencies {
    indirectApi('org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r') { transitive = false }

    relocateClasses project(':toolkit')

    testImplementation project(':testkit')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

configurations.configureEach { Configuration conf ->
    try {
        conf.attributes.attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY))
    } catch (IllegalStateException e) {
        logger.debug(e.toString(), e)
    }
}

rootProject.rootBuildscriptPluginDependencies.all { Dependency dep ->
    project.configurations.api.dependencies.add(dep.copy())
}

rootProject.rootBuildscriptLibraryDependencies.all { Dependency dep ->
    project.configurations.indirectApi.dependencies.add(dep.copy())
}

configurations.gradlePluginApiDependencies {
    exclude(group: 'com.google.code.findbugs')
    exclude(group: 'com.google.errorprone')
    exclude(group: 'com.google.guava')
    exclude(group: 'com.google.code.gson')
    exclude(group: 'org.jdom')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Map<File, String> scriptsToInclude = [:]
rootProject.ext['includedBuildScripts'].forEach { String includedBuildScript ->
    File includedBuildScriptFile = rootProject.file(includedBuildScript)
    String includedBuildScriptResource = includedBuildScript.replaceFirst(/^gradle\//, '')
    scriptsToInclude[includedBuildScriptFile] = "${project.calculateBaseJavaPackage().replace('.', '/')}/${includedBuildScriptResource}"
}

tasks.named('generateResources') {
    inputs.files(configurations.compileClasspath).optional().withPropertyName('compileClasspath')
    MapProperty<String, String> props = project.objects.mapProperty(String, String).value(provider {
        [
            tookitGroup: project.tookitGroup(),
            tookitVersion: project.tookitVersion(),
            tookitUrl: project.tookitUrl(),
        ]
    }).with { it.finalizeValueOnRead(); it }
    inputs.property('props', props)
    scriptsToInclude.forEach { includedBuildScriptFile, resource ->
        inputs.file(includedBuildScriptFile)
        binaryFile(resource) { OutputStream outputStream ->
            String content = includedBuildScriptFile.getText('UTF-8')

            content = content.replaceAll(/\$\{\s*(?:project\s*\.\s*)?(tookitGroup|tookitVersion)\s*\(\s*\)\s*\}/) { matcher ->
                props.get()[matcher[1]]
            }
            content = content.replaceAll(/\b(?:project\s*\.\s*)?(tookitGroup|tookitVersion|tookitUrl)\s*\(\s*\)/) { matcher ->
                '\'' + props.get()[matcher[1]] + '\''
            }

            outputStream.write(content.getBytes('UTF-8'))
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') {
    Property<String> gradleApiMinVersion = project.objects.property(String).value(provider { project.property('gradle-api.min-version').toString() }).with { it.finalizeValueOnRead(); it }
    Property<String> toolkitVersion = project.objects.property(String).value(provider { project.version?.toString() }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitVersion', toolkitVersion)
    Property<String> toolkitBaseJavaPackage = project.objects.property(String).value(provider {
        project.calculateBaseJavaPackageFor(project(':toolkit'))
    }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitBaseJavaPackage', toolkitBaseJavaPackage)
    classFile(project.calculateBaseJavaPackage(), 'BuildLogicPlugin') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("java.lang.String", "format")
        it.writeStaticImport("${toolkitBaseJavaPackage.get()}.ObjectUtils", "unwrapProviders")
        it.writeStaticImport("${toolkitBaseJavaPackage.get()}.ResourceUtils", "getResourceUrl")
        it.println("")
        it.writeImport("lombok.val")
        it.writeImport("org.gradle.api.Plugin")
        it.writeImport("org.gradle.api.Project")
        it.writeImport("org.gradle.util.GradleVersion")
        it.println("")
        it.writeSuppressWarnings("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "InjectedReferences")
        it.writeBlock("public class ${it.simpleName} implements Plugin<Project>") {
            it.writeBlock("public void apply(Project project)") {
                it.println("val currentGradleVersion = GradleVersion.current().getBaseVersion();")
                it.println("val minToolkitGradleVersion = GradleVersion.version(\"${it.escapeJava(gradleApiMinVersion.get())}\").getBaseVersion();")
                it.writeBlock("if (currentGradleVersion.compareTo(minToolkitGradleVersion) < 0)") {
                    it.println("throw new IllegalStateException(format(")
                    it.println("    \"Current Gradle version is %s, which is less than minimum supported Gradle version by toolkit: %s\",")
                    it.println("    currentGradleVersion.getVersion(),")
                    it.println("    minToolkitGradleVersion.getVersion()")
                    it.println("));")
                }

                it.println("")

                it.println("project.apply(it -> {")
                scriptsToInclude.values().forEach { resource ->
                    it.println("    it.from(getResourceUrl(\"/${it.escapeJava(resource)}\", ${it.simpleName}.class));")
                }
                it.println("});");

                it.println("")

                it.println("Object minPluginGradleVersionUntyped = unwrapProviders(project.findProperty(\"gradle-api.min-version\"));")
                it.writeBlock("if (minPluginGradleVersionUntyped instanceof GradleVersion)") {
                    it.println("minPluginGradleVersionUntyped = ((GradleVersion) minPluginGradleVersionUntyped).getBaseVersion().getVersion();")
                }
                it.writeBlock("if (minPluginGradleVersionUntyped != null)") {
                    it.println("val minPluginGradleVersion = GradleVersion.version(minPluginGradleVersionUntyped.toString()).getBaseVersion();")
                    it.writeBlock("if (minPluginGradleVersion.compareTo(minToolkitGradleVersion) < 0)") {
                        it.println("throw new IllegalStateException(format(")
                        it.println("    \"Min supported Gradle version by the plugin is %s, which is less than minimum supported Gradle version by toolkit: %s\",")
                        it.println("    currentGradleVersion.getVersion(),")
                        it.println("    minToolkitGradleVersion.getVersion()")
                        it.println("));")
                    }
                }

                it.println("")

                it.println("project.allprojects(proj -> ")
                it.println("    proj.getConfigurations()")
                it.println("        .getByName(\"projectDependencyConstraints\")")
                it.println("        .getDependencies()")
                it.println("        .add(")
                it.println("            proj.getDependencies().platform(\"name.remal.gradle-plugins.toolkit:toolkit-bom:${toolkitVersion.get()}\")")
                it.println("        )")
                it.println(");")
            }
        }
    }
}
