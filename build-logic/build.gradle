import org.gradle.util.GradleVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath platform("org.ow2.asm:asm-bom:${rootBuildscriptClasspathVersionOf('org.ow2.asm:asm-bom')}")
        classpath 'org.ow2.asm:asm-tree'
    }
    repositories {
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.ext['javaGradlePluginWithoutPublish'] = true

apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.generate-sources'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

afterEvaluate {
    tasks.matching { isVerificationTask(it) }.all {
        boolean shouldBeDisabled = false

        if (project.javaRuntimeVersion != JavaVersion.current()) {
            shouldBeDisabled = true
        }

        if (project.gradleApiVersion != GradleVersion.current()) {
            shouldBeDisabled = true
        }

        if (shouldBeDisabled) {
            disableTask(it)
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dependencies {
    indirectApi('org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r') { transitive = false }

    relocateClasses project(':toolkit')

    testImplementation project(':testkit')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

configurations.all { attributes.attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY)) }

rootProject.buildscript.configurations.classpathApi.allDependencies.forEach { Dependency dep ->
    project.configurations.api.dependencies.add(dep.copy())
}

configurations.gradlePluginApiDependencies {
    exclude(group: 'com.google.code.findbugs')
    exclude(group: 'com.google.errorprone')
    exclude(group: 'com.google.guava')
    exclude(group: 'com.google.code.gson')
    exclude(group: 'org.jdom')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Map<File, String> scriptsToInclude = [:]
rootProject.ext['includedBuildScripts'].forEach { String includedBuildScript ->
    File includedBuildScriptFile = rootProject.file(includedBuildScript)
    String includedBuildScriptResource = includedBuildScript.replaceFirst(/^gradle\//, '')
    scriptsToInclude[includedBuildScriptFile] = "${project.calculateBaseJavaPackage().replace('.', '/')}/${includedBuildScriptResource}"
}

tasks.named('generateResources') {
    inputs.files(configurations.compileClasspath).optional().withPropertyName('compileClasspath')
    scriptsToInclude.forEach { includedBuildScriptFile, resource ->
        inputs.file(includedBuildScriptFile)
        binaryFile(resource) { OutputStream outputStream ->
            String content = includedBuildScriptFile.getText('UTF-8')

            content = content.replaceAll(/\$\{\s*(?:project\s*\.\s*)?(rootBuildscriptClasspathVersionOf)\s*\(\s*('|")(.+?)\2\s*\)\s*\}/) { matcher ->
                project.property(matcher[1])(matcher[3])
            }
            content = content.replaceAll(/\b(?:project\s*\.\s*)?(rootBuildscriptClasspathVersionOf)\s*\(\s*('|")(.+?)\2\s*\)/) { matcher ->
                '\'' + project.property(matcher[1])(matcher[3]) + '\''
            }

            content = content.replaceAll(/\$\{\s*(?:project\s*\.\s*)?(tookitGroup|tookitVersion)\s*\(\s*\)\s*\}/) { matcher ->
                project.property(matcher[1])()
            }
            content = content.replaceAll(/\b(?:project\s*\.\s*)?(tookitGroup|tookitVersion|tookitUrl)\s*\(\s*\)/) { matcher ->
                '\'' + project.property(matcher[1])() + '\''
            }

            outputStream.write(content.getBytes('UTF-8'))
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') {
    inputs.property('project.version', project.provider { project.version })
    classFile(project.calculateBaseJavaPackage(), 'BuildLogicPlugin') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("${project.calculateBaseJavaPackageFor(project(':toolkit'))}.ResourceUtils", "getResourceUrl")
        it.println("")
        it.writeImport("org.gradle.api.Plugin")
        it.writeImport("org.gradle.api.Project")
        it.println("")
        it.writeSuppressWarnings("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "InjectedReferences")
        it.writeBlock("public class ${it.simpleName} implements Plugin<Project>") {
            it.writeBlock("public void apply(Project project)") {
                it.println("project.apply(it -> {");
                scriptsToInclude.values().forEach { resource ->
                    it.println("    it.from(getResourceUrl(\"/${it.escapeJava(resource)}\", ${it.simpleName}.class));")
                }
                it.println("});");

                it.println("")

                it.println("project.allprojects(proj -> ")
                it.println("    proj.getConfigurations()")
                it.println("        .getByName(\"projectDependencyConstraints\")")
                it.println("        .getDependencies()")
                it.println("        .add(")
                it.println("            proj.getDependencies().platform(\"name.remal.gradle-plugins.toolkit:toolkit-bom:${project.version}\")")
                it.println("        )")
                it.println(");")
            }
        }
    }
}
