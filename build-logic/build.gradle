import static org.gradle.api.tasks.PathSensitivity.RELATIVE

import org.gradle.util.GradleVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath platform("org.ow2.asm:asm-bom:9.9")
        classpath 'org.ow2.asm:asm-tree'
    }
    repositories {
        mavenCentral()
    }
}

class ThisScriptLocation {}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.ext['javaGradlePluginWithoutPublish'] = true

apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.generate-sources'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.withType(Test).configureEach {
    onlyIf {
        return project.gradleApiVersion == GradleVersion.current()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dependencies {
    indirectApi('org.eclipse.jgit:org.eclipse.jgit:7.4.0.202509020913-r') { transitive = false }

    classesRelocation project(':toolkit')

    testImplementation project(':testkit')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

configurations.configureEach { Configuration conf ->
    try {
        conf.attributes.attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY))
    } catch (IllegalStateException e) {
        logger.debug(e.toString(), e)
    }
}

rootProject.rootBuildscriptPluginDependencies.all { Dependency dep ->
    project.configurations.api.dependencies.add(dep.copy())
}

rootProject.rootBuildscriptLibraryDependencies.all { Dependency dep ->
    project.configurations.indirectApi.dependencies.add(dep.copy())
}

configurations.gradlePluginApiDependencies {
    exclude(group: 'com.google.code.findbugs')
    exclude(group: 'com.google.errorprone')
    exclude(group: 'com.google.guava')
    exclude(group: 'com.google.code.gson')
    exclude(group: 'org.jdom')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

MapProperty<File, String> scriptsToInclude = objects.mapProperty(File, String).value(provider {
    Map<File, String> result = [:]
    rootProject.ext['includedBuildScripts'].forEach { String includedBuildScript ->
        File includedBuildScriptFile = rootProject.file(includedBuildScript)
        String includedBuildScriptResource = includedBuildScript.replaceFirst(/^gradle\//, '')
        result[includedBuildScriptFile] = "${project.calculateBaseJavaPackage().replace('.', '/')}/${includedBuildScriptResource}"
    }
    return result
}).with { it.finalizeValueOnRead(); it }

generateSources.forMainSourceSet.resources {
    inputs.dir(getClassLocationFile(ThisScriptLocation)).withNormalizer(ClasspathNormalizer).optional()

    dependsOn(configurations.compileClasspath)
    inputs.files(configurations.compileClasspath).withPropertyName('compileClasspath').withNormalizer(ClasspathNormalizer).optional()

    MapProperty<String, String> toolkitProps = project.objects.mapProperty(String, String).value(provider {
        [
            tookitGroup: project.tookitGroup(),
            tookitVersion: project.tookitVersion(),
            tookitUrlProperty: project.tookitUrlProperty.get(),
        ]
    }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitProps', toolkitProps).optional(true)

    scriptsToInclude.get().forEach { includedBuildScriptFile, resource ->
        inputs.file(includedBuildScriptFile).withPropertyName("scriptsToInclude:$resource").withPathSensitivity(RELATIVE).optional()

        textFile(resource) {
            String content = includedBuildScriptFile.getText('UTF-8')

            content = content.replaceAll(/\$\{\s*(?:project\s*\.\s*)?(tookitGroup|tookitVersion)\s*\(\s*\)\s*\}/) { matcher ->
                toolkitProps.get()[matcher[1]]
            }
            content = content.replaceAll(/\b(?:project\s*\.\s*)?(tookitGroup|tookitVersion|tookitUrlProperty)\s*(\.\s*get\s*)?\(\s*\)/) { matcher ->
                '\'' + toolkitProps.get()[matcher[1]] + '\''
            }

            write(content)
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

generateSources.forMainSourceSet.java {
    inputs.dir(getClassLocationFile(ThisScriptLocation)).withNormalizer(ClasspathNormalizer).optional()

    Property<String> javaApiMinVersion = project.objects.property(String).value(provider { project.property('java-runtime.min-version').toString() }).with { it.finalizeValueOnRead(); it }
    inputs.property('javaApiMinVersion', javaApiMinVersion).optional(true)

    Property<String> gradleApiMinVersion = project.objects.property(String).value(provider { project.property('gradle-api.min-version').toString() }).with { it.finalizeValueOnRead(); it }
    inputs.property('gradleApiMinVersion', gradleApiMinVersion).optional(true)

    Property<String> toolkitVersion = project.objects.property(String).value(provider { project.version?.toString() }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitVersion', toolkitVersion).optional(true)

    Property<String> toolkitBaseJavaPackage = project.objects.property(String).value(provider {
        project.calculateBaseJavaPackageFor(project(':toolkit'))
    }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitBaseJavaPackage', toolkitBaseJavaPackage).optional(true)

    classFile(project.calculateBaseJavaPackage(), 'BuildLogicPlugin') {
        addStaticImport("java.lang.String", "format")
        addStaticImport("${toolkitBaseJavaPackage.get()}.ObjectUtils", "unwrapProviders")
        addStaticImport("${toolkitBaseJavaPackage.get()}.ResourceUtils", "getResourceUrl")

        addImport("org.gradle.api.JavaVersion")
        addImport("org.gradle.api.Plugin")
        addImport("org.gradle.api.Project")
        addImport("org.gradle.util.GradleVersion")

        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "InjectedReferences")
        block("public class ${simpleName} implements Plugin<Project>") {
            line()

            block("public void apply(Project project)") {
                line("var currentJavaVersion = JavaVersion.current();")
                line("var minToolkitJavaVersion = JavaVersion.toVersion(\"${escapeString(javaApiMinVersion.get())}\");")
                block("if (currentJavaVersion.compareTo(minToolkitJavaVersion) < 0)") {
                    line("throw new IllegalStateException(format(")
                    indent {
                        line("\"Current Java version is %s, which is less than minimum supported Java version by toolkit: %s\",")
                        line("currentJavaVersion,")
                        line("minToolkitJavaVersion")
                    }
                    line("));")
                }

                line()

                line("var currentGradleVersion = GradleVersion.current().getBaseVersion();")
                line("var minToolkitGradleVersion = GradleVersion.version(\"${escapeString(gradleApiMinVersion.get())}\").getBaseVersion();")
                block("if (currentGradleVersion.compareTo(minToolkitGradleVersion) < 0)") {
                    line("throw new IllegalStateException(format(")
                    indent {
                        line("\"Current Gradle version is %s, which is less than minimum supported Gradle version by toolkit: %s\",")
                        line("currentGradleVersion.getVersion(),")
                        line("minToolkitGradleVersion.getVersion()")
                    }
                    line("));")
                }

                line()

                line("project.apply(it -> {")
                indent {
                    scriptsToInclude.get().values().forEach { resource ->
                        line("it.from(getResourceUrl(\"/${escapeString(resource)}\", ${simpleName}.class));")
                    }
                }
                line("});");

                line()

                line("Object minPluginJavaVersionUntyped = unwrapProviders(project.findProperty(\"java-runtime.min-version\"));")
                block("if (minPluginJavaVersionUntyped != null)") {
                    line("var minPluginJavaVersion = JavaVersion.toVersion(minPluginJavaVersionUntyped);")
                    block("if (minPluginJavaVersion.compareTo(minToolkitJavaVersion) < 0)") {
                        line("throw new IllegalStateException(format(")
                        indent {
                            line("\"Min supported Java version by the plugin is %s, which is less than minimum supported Java version by toolkit: %s\",")
                            line("minPluginJavaVersion,")
                            line("minToolkitJavaVersion")
                        }
                        line("));")
                    }
                }

                line()

                line("Object minPluginGradleVersionUntyped = unwrapProviders(project.findProperty(\"gradle-api.min-version\"));")
                block("if (minPluginGradleVersionUntyped instanceof GradleVersion)") {
                    line("minPluginGradleVersionUntyped = ((GradleVersion) minPluginGradleVersionUntyped).getVersion();")
                }
                block("if (minPluginGradleVersionUntyped != null)") {
                    line("var minPluginGradleVersion = GradleVersion.version(minPluginGradleVersionUntyped.toString()).getBaseVersion();")
                    block("if (minPluginGradleVersion.compareTo(minToolkitGradleVersion) < 0)") {
                        line("throw new IllegalStateException(format(")
                        indent {
                            line("\"Min supported Gradle version by the plugin is %s, which is less than minimum supported Gradle version by toolkit: %s\",")
                            line("minPluginGradleVersion.getVersion(),")
                            line("minToolkitGradleVersion.getVersion()")
                        }
                        line("));")
                    }
                }

                line()

                line("project.allprojects(proj -> ")
                indent {
                    line("proj.getConfigurations()")
                    indent {
                        line(".getByName(\"projectDependencyConstraints\")")
                        line(".getDependencies()")
                        line(".add(")
                        indent {
                            line("proj.getDependencies().platform(\"name.remal.gradle-plugins.toolkit:toolkit-bom:${toolkitVersion.get()}\")")
                        }
                        line(")")
                    }
                }
                line(");")
            }

            line()
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

pluginManager.withPlugin('name.remal.sonarlint') {
    sonarLint {
        rules {
            disable(
                'java:S4032', // Packages containing only "package-info.java" should be removed
            )
        }
    }
}
