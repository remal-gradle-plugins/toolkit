/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    Closure addRootBuildscriptDependencies = { String propertyName, Collection<Object> notations ->
        DomainObjectSet<Dependency> dependenciesSet = project.ext[propertyName] = project.objects.domainObjectSet(Dependency)
        dependenciesSet.whenObjectAdded { configurations.classpath.dependencies.add(it) }
        dependenciesSet.whenObjectRemoved { configurations.classpath.dependencies.remove(it) }
        notations.forEach { notation ->
            dependenciesSet.add(
                dependencies.create(notation) {
                    exclude(group: 'org.slf4j')
                }
            )
        }
    }

    addRootBuildscriptDependencies(
        'rootBuildscriptPluginDependencies',
        [
            'name.remal.gradle-plugins.lombok:lombok:3.1.5',
            'name.remal.gradle-plugins.merge-resources:merge-resources:5.0.4',
            'name.remal.gradle-plugins.test-source-sets:test-source-sets:5.0.4',
            'name.remal.gradle-plugins.sonarlint:sonarlint:7.0.0-rc-4',
            'name.remal.gradle-plugins.build-time-constants:build-time-constants:2.1.0',
            'name.remal.gradle-plugins.classes-relocation:classes-relocation:2.1.5',
            'name.remal.gradle-plugins.generate-sources:generate-sources:2.0.3',
            'name.remal.gradle-plugins.github-repository-info:github-repository-info:1.0.0-rc-3',
            'name.remal.gradle-plugins.idea-settings:idea-settings:4.0.6',
            'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.3',
            'com.gradle.publish:plugin-publish-plugin:2.0.0',
            'io.github.gradle-nexus:publish-plugin:2.0.0',
            'net.ltgt.gradle:gradle-errorprone-plugin:4.3.0',
        ]
    )

    addRootBuildscriptDependencies(
        'rootBuildscriptLibraryDependencies',
        [
            dependencies.platform('org.ow2.asm:asm-bom:9.9'),
            'org.ow2.asm:asm',
            'org.ow2.asm:asm-tree',
            'org.ow2.asm:asm-analysis',
            'org.ow2.asm:asm-util',
            'org.ow2.asm:asm-commons',
        ]
    )

    addRootBuildscriptDependencies(
        'rootBuildscriptBuildDependencies',
        [
            'org.json:json:20250517',
            'org.jsoup:jsoup:1.21.2',
            'com.vdurmont:semver4j:3.1.0',
            'org.eclipse.jgit:org.eclipse.jgit:6.10.1.202505221210-r',
        ]
    )
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = 'name.remal.gradle-plugins.toolkit'
    version = '0-SNAPSHOT'
}

List<String> includedBuildScripts = [
    'gradle/common.gradle',
    'gradle/helpers.gradle',
    'gradle/properties.gradle',
    'gradle/ci.gradle',
    'gradle/dependencies.gradle',
    'gradle/check-source-dirs.gradle',
    'gradle/base-package.gradle',
    'gradle/java.gradle',
    'gradle/gradle-backward-compatibility-fixes.gradle',
    'gradle/test.gradle',
    'gradle/javaagent.gradle',
    'gradle/generate-sources.gradle',
    'gradle/lombok.gradle',
    'gradle/errorprone.gradle',
    'gradle/build-time-constants.gradle',
    'gradle/classes-relocation.gradle',
    'gradle/cross-compile.gradle',
    'gradle/groovy.gradle',
    'gradle/checkstyle.gradle',
    'gradle/sonarlint.gradle',
    'gradle/javadoc.gradle',
    'gradle/jacoco.gradle',
    'gradle/gradle-plugin.gradle',
    'gradle/gradle-plugin-collect-api-dependencies.gradle',
    'gradle/gradle-plugin-collect-classes-relying-on-dependencies.gradle',
    'gradle/publish-gradle-plugin.gradle',
    'gradle/publish-maven.gradle',
    'gradle/publish-maven-bom.gradle',
    'gradle/publish-maven-central.gradle',
    'gradle/publish-maven-to-build-dir.gradle',
    'gradle/publish-maven-push-back.gradle',
    'gradle/signing.gradle',
    'gradle/toolkit-dependencies.gradle',
    'gradle/process-readme.gradle',
    'gradle/ide.gradle',
    'gradle/github-submit-dependencies.gradle',
    'gradle/build-performance.gradle',
].toUnique()
project.ext['includedBuildScripts'] = includedBuildScripts
includedBuildScripts.forEach { apply from: it }

project.ext.tookitGroup = { rootProject.group }
project.ext.tookitVersion = { rootProject.version }
project.ext.tookitUrlProperty = githubRepositoryInfo.repository.map { it.htmlUrl }

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Collection<Dependency> snapshotPluginDependencies = project.rootBuildscriptPluginDependencies.findAll { it.version.endsWith('-SNAPSHOT') }
if (!snapshotPluginDependencies.isEmpty()) {
    apply plugin: 'java'
    snapshotPluginDependencies.forEach { dependencies.add('compileOnly', it) }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    pluginManager.withPlugin('java') {
        dependencies {
            optional 'name.remal.gradle-api:gradle-api'

            classesRelocation 'org.ow2.asm:asm'
            classesRelocation 'org.ow2.asm:asm-analysis'
            classesRelocation 'org.ow2.asm:asm-commons'
            classesRelocation 'org.ow2.asm:asm-tree'
            classesRelocation 'org.ow2.asm:asm-util'
            classesRelocation 'org.json:json:20250517'
            classesRelocation 'org.jsoup:jsoup:1.21.2'
            classesRelocation 'org.jdom:jdom2:2.0.6.1'


            testImplementation 'org.ow2.asm:asm'
            testImplementation 'org.ow2.asm:asm-tree'
        }

        if (project.path != ':toolkit-annotations' && !project.path.startsWith(':toolkit-annotations:')) {
            dependencies {
                optional project(':toolkit-annotations')
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Closure<Integer> getMajorVersionOfDependency = { Object dep ->
    String moduleVersion = null
    if (dep instanceof ModuleDependency) {
        moduleVersion = dep.version
    } else if (dep instanceof ResolvedDependency) {
        moduleVersion = dep.moduleVersion
    }
    if (moduleVersion == null || moduleVersion.isEmpty()) {
        return null
    }

    String majorVersionStr = moduleVersion.split('\\.')[0]
    return majorVersionStr.isInteger() ? majorVersionStr.toInteger() : null
}

project.settingsBuildscriptClasspathDependencies.forEach { ResolvedDependency dep ->
    if (dep.moduleGroup == 'org.gradle.toolchains' && dep.moduleName.startsWith('foojay-resolver')) {
        Integer majorVersion = getMajorVersionOfDependency(dep)
        if (majorVersion == null) {
            return
        }

        JavaVersion javaRuntimeMinVersion = project.javaRuntimeMinVersion
        if (majorVersion >= 1 && javaRuntimeMinVersion < JavaVersion.VERSION_17) {
            throw new GradleException("${dep.moduleGroup}:${dep.moduleName}:${dep.moduleVersion} is not compatible with the minimum supported Java version: ${project.javaRuntimeMinVersion}")
        }
    }
}

configurations.testConstraints.dependencies.all { Dependency dep ->
    if (dep.group == 'org.junit') {
        Integer majorVersion = getMajorVersionOfDependency(dep)
        if (majorVersion == null) {
            return
        }

        JavaVersion javaRuntimeMinVersion = project.javaRuntimeMinVersion
        if (majorVersion >= 6 && javaRuntimeMinVersion < JavaVersion.VERSION_17) {
            throw new GradleException("${dep.group}:${dep.name}:${dep.version} is not compatible with the minimum supported Java version: ${project.javaRuntimeMinVersion}")
        }
    }
}
