/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath 'name.remal.gradle-plugins.test-source-sets:test-source-sets:2.2.3'
        classpath 'com.gradle.publish:plugin-publish-plugin:1.0.0'
        classpath 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.5'
        classpath 'name.remal:gradle-plugins:1.6.0'
        classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:2.0.2'
        classpath('com.google.guava:guava:31.1-jre') {
            exclude(group: 'com.google.code.findbugs')
            exclude(group: 'org.checkerframework')
            exclude(group: 'com.google.errorprone')
            exclude(group: 'com.google.j2objc')
        }
    }
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = "name.remal.gradle-plugins.${rootProject.name}"
    version = '0-SNAPSHOT'
}

apply from: 'gradle/properties.gradle'
apply from: 'gradle/ci.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/java.gradle'
apply from: 'gradle/classes-relocation.gradle'
apply from: 'gradle/groovy.gradle'
apply from: 'gradle/checkstyle.gradle'
apply from: 'gradle/errorprone.gradle'
apply from: 'gradle/gradle-plugin.gradle'
apply from: 'gradle/base-package.gradle'
apply from: 'gradle/publish-gradle-plugin.gradle'
apply from: 'gradle/publish-maven.gradle'
apply from: 'gradle/publish-maven-bom.gradle'
apply from: 'gradle/publish-maven-central.gradle'
apply from: 'gradle/signing.gradle'
apply from: 'gradle/process-readme.gradle'
apply from: 'gradle/renovate.gradle'
apply from: 'gradle/ide.gradle'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    pluginManager.withPlugin('java') {
        dependencies {
            optional 'name.remal.gradle-api:gradle-api'

            annotationProcessorAll 'com.google.auto.service:auto-service'
            compileOnlyAll 'com.google.auto.service:auto-service-annotations'
            annotationProcessorAll 'org.immutables:value'
            compileOnlyAll 'org.immutables:value-annotations'
            compileOnlyAll 'org.immutables:builder'

            relocateClasses 'org.apache.commons:commons-lang3'
            relocateClasses 'org.apache.commons:commons-text'
            relocateClasses 'com.google.guava:guava'
            relocateClasses 'org.ow2.asm:asm'


            testImplementation 'org.apache.commons:commons-lang3'
            testImplementation 'com.google.guava:guava'
            testImplementation 'org.ow2.asm:asm'
            testImplementation 'org.ow2.asm:asm-tree'
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.classes-relocation'
apply plugin: 'name.remal.generate-sources'
apply from: 'build-include-classes.gradle'
apply from: 'build-generate-MembersFinder.gradle'
apply from: 'build-generate-SneakyThrowUtils.gradle'
apply from: 'build-generate-checkstyle.xsl.gradle'

dependencies {
    optional 'org.ow2.asm:asm'
    optional 'com.puppycrawl.tools:checkstyle'

    relocateClasses 'org.ec4j.core:ec4j-core'
    relocateClasses 'org.jdom:jdom'
    relocateClasses 'net.htmlparser.jericho:jericho-html'
    relocateClasses('org.eclipse.jgit:org.eclipse.jgit') {
        exclude group: 'org.slf4j'
    }

    compileOnly project(':toolkit--java-common')
    includeClasses project(':toolkit--java-common')
    includeClasses project(':toolkit--java-9')


    testImplementation project(':testkit')
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') {
    classFile('name.remal.gradleplugins.toolkit', 'ToolkitBuildInfo') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("lombok.NoArgsConstructor")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeBlock("abstract class ToolkitBuildInfo") {
            it.println("public static final String TOOLKIT_GROUP_ID = \"${it.escapeJava(project.group)}\";")
            it.println("public static final String TOOLKIT_ARTIFACT_IT = \"${it.escapeJava(project.name)}\";")
            it.println("public static final String TOOLKIT_VERSION = \"${it.escapeJava(project.version)}\";")
        }
    }
}
