/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    configurations.create('classpathApi') { configurations.classpath.extendsFrom(it) }
    configurations.create('classpathPlugins') { configurations.classpathApi.extendsFrom(it) }
    configurations.create('classpathLibs') { configurations.classpathApi.extendsFrom(it) }
    configurations.create('toolkitBuildLibs') { configurations.classpath.extendsFrom(it) }
    dependencies {
        classpathPlugins 'name.remal.gradle-plugins.lombok:lombok:1.1.0'
        classpathPlugins 'name.remal.gradle-plugins.test-source-sets:test-source-sets:2.3.0'
        classpathPlugins 'name.remal.gradle-plugins.sonarlint:sonarlint:2.0.2'
        classpathPlugins 'name.remal.gradle-plugins.idea-settings:idea-settings:2.2.2'
        classpathPlugins 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.7'
        classpathPlugins 'com.gradle.publish:plugin-publish-plugin:1.1.0'
        classpathPlugins 'name.remal:gradle-plugins:1.7.2'
        classpathPlugins 'io.github.gradle-nexus:publish-plugin:1.1.0'
        classpathPlugins 'net.ltgt.gradle:gradle-errorprone-plugin:3.0.1'

        classpathLibs platform('org.ow2.asm:asm-bom:9.4')
        classpathLibs 'org.ow2.asm:asm'
        classpathLibs 'org.ow2.asm:asm-tree'
        classpathLibs 'org.ow2.asm:asm-analysis'
        classpathLibs 'org.ow2.asm:asm-util'
        classpathLibs 'org.ow2.asm:asm-commons'

        toolkitBuildLibs 'org.json:json:20220924'
        toolkitBuildLibs 'com.vdurmont:semver4j:3.1.0'
        toolkitBuildLibs('com.google.guava:guava:31.1-jre') {
            exclude(group: 'com.google.code.findbugs')
            exclude(group: 'org.checkerframework')
            exclude(group: 'com.google.errorprone')
            exclude(group: 'com.google.j2objc')
        }
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    project.ext.rootBuildscriptClasspathVersionOf = { String notation ->
        String version = project.buildscript.configurations.classpath
            .resolvedConfiguration
            .lenientConfiguration
            .allModuleDependencies
            .find { "${it.moduleGroup}:${it.moduleName}" == notation }
            ?.moduleVersion
        if (version == null) {
            throw new GradleException("Classpath dependency version can't be found for '${notation}'")
        }
        return version
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = 'name.remal.gradle-plugins.toolkit'
    version = '0-SNAPSHOT'
}

List<String> includedBuildScripts = [
    'gradle/helpers.gradle',
    'gradle/properties.gradle',
    'gradle/ci.gradle',
    'gradle/common.gradle',
    'gradle/merge-resources.gradle',
    'gradle/dependencies.gradle',
    'gradle/base-package.gradle',
    'gradle/java.gradle',
    'gradle/lombok.gradle',
    'gradle/errorprone.gradle',
    'gradle/classes-relocation.gradle',
    'gradle/cross-compile.gradle',
    'gradle/groovy.gradle',
    'gradle/checkstyle.gradle',
    'gradle/sonarlint.gradle',
    'gradle/javadoc.gradle',
    'gradle/gradle-plugin.gradle',
    'gradle/gradle-plugin-collect-api-dependencies.gradle',
    'gradle/publish-gradle-plugin.gradle',
    'gradle/publish-maven.gradle',
    'gradle/publish-maven-bom.gradle',
    'gradle/publish-maven-central.gradle',
    'gradle/publish-maven-to-build-dir.gradle',
    'gradle/signing.gradle',
    'gradle/process-readme.gradle',
    'gradle/ide.gradle',
].toUnique()
project.ext['includedBuildScripts'] = includedBuildScripts
includedBuildScripts.forEach { apply from: it }

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    pluginManager.withPlugin('java') {
        dependencies {
            optional 'name.remal.gradle-api:gradle-api'

            relocateClasses 'org.apache.commons:commons-lang3'
            relocateClasses 'org.apache.commons:commons-text'
            relocateClasses 'com.google.guava:guava'
            relocateClasses 'org.ow2.asm:asm'
            relocateClasses 'org.ow2.asm:asm-analysis'
            relocateClasses 'org.ow2.asm:asm-commons'
            relocateClasses 'org.ow2.asm:asm-tree'
            relocateClasses 'org.ow2.asm:asm-util'
            relocateClasses 'org.json:json:20220924'


            testImplementation 'org.apache.commons:commons-lang3'
            testImplementation 'com.google.guava:guava'
            testImplementation 'org.ow2.asm:asm'
            testImplementation 'org.ow2.asm:asm-tree'
        }

        if (project.path != ':toolkit-annotations' && !project.path.startsWith(':toolkit-annotations:')) {
            dependencies {
                optional project(':toolkit-annotations')
            }
        }
    }
}
