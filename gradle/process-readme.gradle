allprojects {
    tasks.create('processReadme') { Task task ->
        task.group = 'documentation'
        task.outputs.upToDateWhen { false }

        task.ext.readmeFileProcessors = []

        task.doLast {
            List<Closure> readmeFileProcessors = task.ext.readmeFileProcessors
            if (readmeFileProcessors.isEmpty()) {
                return
            }

            FileTree files = project.fileTree(project.projectDir) {
                include('README.md')
            }
            files.visit { FileVisitDetails details ->
                if (details.directory) {
                    return
                }

                File readmeFile = details.file
                logger.lifecycle('Processing {}', readmeFile)
                readmeFileProcessors.forEach { fileProcessor -> fileProcessor(readmeFile) }
            }
        }

        task.ext.readmeFileProcessors.add(
            { File readmeFile ->
                String content = readmeFile.getText('UTF-8')

                content = content.replaceAll(
                    /<!--\s*((?:code-)?property)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String property = it[2]
                    logger.lifecycle('  Handling {}: {}', tag, property)
                    Object propertyValueObj = project.unwrapProviders(project.property(property))
                    String propertyValue = "$propertyValueObj"
                    if (tag.contains('code-')) {
                        propertyValue = "`$propertyValue`"
                    }
                    return "<!--$tag:$property-->$propertyValue<!--/$tag-->"
                }

                readmeFile.setText(content, 'UTF-8')
            }
        )

        task.ext.readmeFileProcessors.add(
            { File readmeFile ->
                String content = readmeFile.getText('UTF-8')

                content = content.replaceAll(
                    /<!--\s*(iterable-(?:code-)?property)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String property = it[2]
                    logger.lifecycle('  Handling {}: {}', tag, property)
                    Object propertyValueObj = project.unwrapProviders(project.property(property))
                    if (!(propertyValueObj instanceof Iterable)) {
                        throw new GradleException("`$property` property is not iterable: ${propertyValueObj?.class}")
                    }
                    if (tag.contains('code-')) {
                        propertyValueObj = propertyValueObj.collect { "`$it`" }
                    }
                    String propertyValue = propertyValueObj.collect { "\n* $it" }.join('') + '\n'
                    return "<!--$tag:$property-->$propertyValue<!--/$tag-->"
                }

                readmeFile.setText(content, 'UTF-8')
            }
        )

        task.ext.readmeFileProcessors.add(
            { File readmeFile ->
                String content = readmeFile.getText('UTF-8')

                content = content.replaceAll(
                    /<!--\s*(include(?:-([^:>]+))?)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String lang = it[2] ?: ''
                    String filePath = it[3]
                    logger.lifecycle('  Handling {}{}: {}', tag, lang.isEmpty() ? '' : " ($lang)", filePath)
                    File file = readmeFile.parentFile.toPath().resolve(filePath).toFile()
                    String includeContent = file.getText('UTF-8')
                        .replace('\r\n', '\n')
                        .replace('\n\r', '\n')
                        .replace('\r', '\n')
                    while (includeContent.startsWith('\n')) {
                        includeContent = includeContent.substring(1)
                    }
                    while (includeContent.endsWith('\n')) {
                        includeContent = includeContent.substring(0, includeContent.length() - 1)
                    }
                    return "<!--$tag:$filePath-->\n```$lang\n$includeContent\n```\n<!--/$tag -->"
                }

                readmeFile.setText(content, 'UTF-8')
            }
        )

        task.ext.readmeFileProcessors.add(
            { File readmeFile ->
                String content = readmeFile.getText('UTF-8')

                content = content.replaceAll(
                    /<!--\s*(plugin-usage(?:-(?:groovy|kotlin))?)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String pluginId = it[2]
                    logger.lifecycle('  Handling {}: {}', tag, pluginId)
                    String lastVersion = project.getPluginLastVersion(pluginId)
                    String usage = ''
                    if (tag.endsWith('-kotlin')) {
                        usage = "```kotlin\nplugins {\n    id(\"$pluginId\") version \"$lastVersion\"\n}\n```"
                    } else {
                        usage = "```groovy\nplugins {\n    id '$pluginId' version '$lastVersion'\n}\n```"
                    }
                    return "<!--$tag:$pluginId-->\n$usage\n<!--/$tag-->"
                }

                readmeFile.setText(content, 'UTF-8')
            }
        )
    }
}
