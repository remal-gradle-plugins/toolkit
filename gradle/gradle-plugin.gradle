allprojects {
    pluginManager.withPlugin('java-gradle-plugin') {
        afterEvaluate {
            configurations.all { Configuration conf ->
                conf.dependencies.removeIf {
                    it instanceof FileCollectionDependency && it.files.toString() != 'file collection'
                }
            }
        }

        dependencies {
            optional 'name.remal.gradle-api:gradle-api'
            testImplementation 'name.remal.gradle-api:gradle-test-kit'
        }


        SourceSet functionalSourceSet = testSourceSets.create('functional')

        project.tasks.named(functionalSourceSet.testTaskName, Test) { Test task ->
            Closure<List<Task>> getPublishToBuildDirTasks = {
                rootProject.allprojects
                    .collect { it.tasks.matching { it.name == 'publishToBuildDir' } }
                    .flatten()
            }

            dependsOn(project.provider { getPublishToBuildDirTasks() })

            onlyIf {
                task.systemProperty(
                    'build-dir-maven-repos',
                    getPublishToBuildDirTasks()
                        .collect { it.outputDir.absolutePath }
                        .toSorted()
                        .join(File.pathSeparator)
                )
                return true
            }
        }


        Closure<String> getCorrespondingKotlinVersion = { project.getGradleApiDependencyVersion('org.jetbrains.kotlin:kotlin-stdlib') }

        tasks.matching { it instanceof JavaForkOptions }.configureEach {
            String correspondingKotlinVersion = getCorrespondingKotlinVersion()
            if (correspondingKotlinVersion != null) {
                onlyIf {
                    systemProperty('corresponding-kotlin.version', correspondingKotlinVersion)
                    return true
                }
            }
        }

        configurations.create('correspondingKotlinPlugin') { Configuration conf ->
            conf.defaultDependencies { deps ->
                String correspondingKotlinVersion = getCorrespondingKotlinVersion()
                if (correspondingKotlinVersion != null) {
                    Dependency kotlinPluginDep = project.dependencies.create(
                        "org.jetbrains.kotlin:kotlin-gradle-plugin:${correspondingKotlinVersion}"
                    ) {
                        exclude group: 'commons-logging', module: 'commons-logging'
                        exclude group: 'com.google.code.findbugs'
                        exclude group: 'org.checkerframework'
                        exclude group: 'com.google.errorprone'
                        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
                    }

                    deps.add(kotlinPluginDep)
                }
            }

            conf.extendsFrom = []
            conf.description('Kotlin Gradle plugin os the same version, as Kotlin that bundled in the current Gradle instance')
        }
    }
}
