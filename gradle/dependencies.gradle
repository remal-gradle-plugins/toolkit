allprojects {
    configurations.create('projectDependencyConstraints') { Configuration conf ->
        String mockitoVersion = '3.12.3'

        conf.dependencies.addAll(
            [
                'org.immutables:bom:2.8.9-ea-1',
                'org.junit:junit-bom:5.7.2',
            ].collect { project.dependencies.platform(it) }
        )

        conf.dependencyConstraints.addAll(
            [
                // Static analysis
                'com.google.code.findbugs:jsr305:3.0.2',
                'org.jetbrains:annotations:21.0.1',
                'com.google.errorprone:error_prone_annotations:2.7.1',
                'com.google.errorprone:error_prone_core:2.7.1',

                // Annotation processing
                'org.projectlombok:lombok:1.18.20',
                'com.google.auto.service:auto-service:1.0',
                'com.google.auto.service:auto-service-annotations:1.0',

                // Compile-only
                'name.remal:gradle-plugins-api:1.3.1',
                'org.apache.commons:commons-lang3:3.12.0',
                'org.apache.commons:commons-text:1.9',
                'com.google.guava:guava:30.1.1-jre',
                'org.jdom:jdom:2.0.2',
                'net.htmlparser.jericho:jericho-html:3.4',

                // Compile-only
                'name.remal:gradle-plugins-api:1.3.1',

                // Compile
                "name.remal.gradle-api:local-groovy:${property('gradle-api.version')}",
                "name.remal.gradle-api:gradle-api:${property('gradle-api.version')}",

                // Test
                "name.remal.gradle-api:gradle-test-kit:${property('gradle-api.version')}",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.mockito:mockito-inline:$mockitoVersion",
                "org.mockito:mockito-junit-jupiter:$mockitoVersion",
            ].collect {
                project.dependencies.constraints.create(it) { DependencyConstraint constraint ->
                    constraint.version { it.strictly(constraint.version) }
                }
            }
        )

        conf.extendsFrom = []
        conf.visible = false
        conf.canBeConsumed = false
        conf.canBeResolved = false
        conf.description(
            'Dependency constraints'
        )

        configurations.matching { it !== conf }.configureEach { extendsFrom(conf) }
    }
}
