import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap
import org.gradle.api.internal.tasks.compile.HasCompileOptions

allprojects {
    pluginManager.withPlugin('java') {
        apply plugin: 'name.remal.test-source-sets'
        apply plugin: 'name.remal.classes-relocation'
        apply plugin: 'name.remal.insert-null-checks'

        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = sourceCompatibility

            consistentResolution {
                useCompileClasspathVersions()
            }
        }

        repositories {
            mavenCentral()
            gradlePluginPortal()

            maven {
                name = 'Gradle API'
                url = 'https://maven.pkg.github.com/remal-gradle-api/packages'
                credentials {
                    username = System.getenv('GITHUB_ACTOR') ?: 'x-access-token'
                    password = System.getenv('READ_PACKAGES_GITHUB_TOKEN') ?:
                        'g' + 'hp_xmGQ2dHvCiK685' + 'qNEFuA3IAvv6Vfg62WM1hG'
                }
            }
        }
        repositories.all {
            content {
                if (name == 'Gradle API') {
                    includeGroup('name.remal.gradle-api')
                } else {
                    excludeGroup('name.remal.gradle-api')
                }
            }
        }

        Configuration indirectApiConf = configurations.create('indirectApi') { Configuration conf ->
            conf.canBeResolved = false
            conf.canBeConsumed = false
            conf.description = "Indirect API dependencies (form example: default dependencies for configurations that are created by the plugin)"
        }

        Configuration compileOnlyAllConf = configurations.create('compileOnlyAll') { Configuration conf ->
            conf.canBeResolved = false
            conf.canBeConsumed = false
            conf.description = "Compile-only dependencies for all source-sets"
            sourceSets.all { SourceSet sourceSet ->
                configurations[sourceSet.compileOnlyConfigurationName].extendsFrom(conf)
            }
        }

        Configuration optionalConf = configurations.create('optional') { Configuration conf ->
            conf.canBeResolved = false
            conf.canBeConsumed = false
            conf.description = "Optional dependencies"
            sourceSets.all { SourceSet sourceSet ->
                if (sourceSet.name == SourceSet.MAIN_SOURCE_SET_NAME) {
                    configurations[sourceSet.compileOnlyConfigurationName].extendsFrom(conf)
                } else {
                    configurations[sourceSet.implementationConfigurationName].extendsFrom(conf)
                }
            }
        }

        Configuration optionalHiddenConf = configurations.create('optionalHidden') { Configuration conf ->
            conf.canBeResolved = true
            conf.canBeConsumed = false
            conf.description = "Optional dependencies hidden from IDE"

            tasks.withType(AbstractCompile).configureEach { AbstractCompile task ->
                task.onlyIf {
                    if (!conf.allDependencies.isEmpty()) {
                        task.classpath = task.classpath + project.files(conf.files)
                    }
                    return true
                }
            }

            tasks.withType(Javadoc).configureEach { Javadoc task ->
                task.onlyIf {
                    if (!conf.allDependencies.isEmpty()) {
                        task.classpath = task.classpath + project.files(conf.files)
                    }
                    return true
                }
            }

            tasks.withType(Test).configureEach { Test task ->
                task.onlyIf {
                    if (!conf.allDependencies.isEmpty()) {
                        task.classpath = task.classpath + project.files(conf.files)
                    }
                    return true
                }
            }
        }

        Configuration aptConf = configurations.create('apt') { Configuration conf ->
            conf.canBeResolved = false
            conf.canBeConsumed = false
            conf.description = "Annotation processors and compile-only dependencies for all source-sets"
            sourceSets.all { SourceSet sourceSet ->
                configurations[sourceSet.annotationProcessorConfigurationName].extendsFrom(conf)
                configurations[sourceSet.compileOnlyConfigurationName].extendsFrom(conf)
            }
        }

        Configuration annotationProcessorAllConf = configurations.create('annotationProcessorAll') { Configuration conf ->
            conf.canBeResolved = false
            conf.canBeConsumed = false
            conf.description = "Annotation processors for all source-sets"
            sourceSets.all { SourceSet sourceSet ->
                configurations[sourceSet.annotationProcessorConfigurationName].extendsFrom(conf)
            }
        }

        dependencies {
            compileOnlyAll 'com.google.code.findbugs:jsr305'
            compileOnlyAll 'org.jetbrains:annotations'
            compileOnlyAll 'name.remal:gradle-plugins-api'
            optionalHidden 'com.github.spotbugs:spotbugs-annotations'

            annotationProcessorAll 'com.google.auto.service:auto-service'
            compileOnlyAll 'com.google.auto.service:auto-service-annotations'
            annotationProcessorAll 'org.immutables:value'
            compileOnlyAll 'org.immutables:value-annotations'
            compileOnlyAll 'org.immutables:builder'
            compileOnlyAll('org.immutables:gson') {
                exclude(group: 'com.google.code.gson', module: 'gson')
            }
            optionalHidden 'org.immutables:gson'


            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.mockito:mockito-inline'
            testImplementation 'org.assertj:assertj-core'

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        }

        if (!rootProject.allprojects.any { it.group == 'name.remal.gradle-plugins.toolkit' }) {
            dependencies {
                relocateClasses 'name.remal.gradle-plugins.toolkit:toolkit'
                testImplementation 'name.remal.gradle-plugins.toolkit:testkit'
            }
        }

        sourceSets.all { SourceSet sourceSet ->
            project.configurations[sourceSet.compileClasspathConfigurationName].attributes { attrs ->
                attrs.attribute(
                    LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE,
                    objects.named(LibraryElements, LibraryElements.JAR)
                )
            }
            project.configurations[sourceSet.runtimeClasspathConfigurationName].attributes { attrs ->
                attrs.attribute(
                    LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE,
                    objects.named(LibraryElements, LibraryElements.JAR)
                )
            }
        }

        tasks.matching({ it instanceof HasCompileOptions }).configureEach { HasCompileOptions task ->
            task.options.with {
                it.fork = false
                it.incremental = false
                it.encoding = 'UTF-8'
                it.deprecation = true
                it.compilerArgs.addAll(
                    [
                        '-parameters',
                        '-Werror',
                        '-Xlint:all',
                        '-Xlint:-rawtypes',
                        '-Xlint:-serial',
                        '-Xlint:-processing',
                    ]
                )
            }
        }

        tasks.matching { it instanceof JavaForkOptions }.configureEach {
            List<String> jvmArgs = it.jvmArgs
            if (JavaVersion.VERSION_1_9 <= JavaVersion.current() && JavaVersion.current() <= JavaVersion.VERSION_16) {
                jvmArgs += '--illegal-access=deny'
            }
            it.jvmArgs = jvmArgs
        }

        tasks.withType(Jar).named(sourceSets.main.jarTaskName).configure {
            manifest {
                attributes('Automatic-Module-Name': project.property('javaModuleName'))
            }
        }

        testSourceSets.configureEach { SourceSet testSourceSet ->
            Set<String> testCompileTaskNames = [
                'java',
                'kotlin',
                'groovy',
                'scala',
            ].collect { testSourceSet.getCompileTaskName(it) }.toSet()
            tasks.withType(AbstractCompile).matching { testCompileTaskNames.contains(it.name) }.configureEach { AbstractCompile task ->
                task.sourceCompatibility = JavaVersion.VERSION_11.toString()
                task.targetCompatibility = sourceCompatibility.toString()
            }
        }

        tasks.withType(Test).configureEach {
            if (name == 'test') {
                /*
                 * Required for `org.gradle.testfixtures.ProjectBuilder`.
                 * See https://github.com/gradle/gradle/issues/18647
                 */
                jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
            }

            useJUnitPlatform()
            systemProperty('junit.jupiter.extensions.autodetection.enabled', 'true')
            enableAssertions = true

            testLogging {
                showExceptions = true
                showCauses = true
                showStackTraces = true
                exceptionFormat = 'FULL'
                stackTraceFilters('GROOVY')
                events('FAILED')
            }

            Set<Object> testsWithStdErr = Collections.newSetFromMap(new ConcurrentHashMap<>())
            ConcurrentMap<Object, List<String>> testsMessages = new ConcurrentHashMap<>()
            onOutput { TestDescriptor descr, TestOutputEvent event ->
                if (event.destination.name() == 'StdErr') {
                    testsWithStdErr.add(descr.id)
                }

                List<String> testMessages = testsMessages.computeIfAbsent(descr.id, { new ArrayList<>() })
                testMessages.add(event.getMessage())
            }
            afterTest { TestDescriptor descr, TestResult result ->
                if (result.resultType.name() == 'FAILURE' || testsWithStdErr.contains(descr.id)) {
                    List<String> testMessages = testsMessages.get(descr.id)
                    if (testMessages != null) {
                        println()
                        println("Output of $descr.className > $descr.displayName:")
                        testMessages.forEach { print(" > $it") }
                    }
                }
            }
        }

        project.sourceSets.all { SourceSet sourceSet ->
            project.tasks.withType(AbstractCopyTask)
                .matching { it.name == sourceSet.sourcesJarTaskName }
                .configureEach { AbstractCopyTask task ->
                    task.exclude('**/internal', '**/internal/**/*')
                }
        }
    }
}
