import static java.util.stream.Collectors.toSet

import java.util.stream.Stream

allprojects {
    pluginManager.withPlugin('java') {
        TaskProvider checkSourceDirs = tasks.register('checkSourceDirs') { Task task ->
            task.group = 'verification'
            task.doLast {
                Set<File> allSourceDirs = project.sourceSets.stream()
                    .flatMap { SourceSet sourceSet -> sourceSet.allSource.srcDirs.stream() }
                    .map { File file -> file.canonicalFile }
                    .flatMap { File file -> Stream.of(file, file.parentFile) }
                    .filter { it != null }
                    .collect(toSet())

                List<File> invalidSourceDirs = []

                Closure<List<File>> getSubDirs = { File file ->
                    return file.listFiles()?.collect()?.findAll { it.directory } ?: []
                }

                File baseSourceDir = project.file('src')
                List<File> sourceSetsBaseDirs = getSubDirs(baseSourceDir)
                for (File sourceSetsBaseDir : sourceSetsBaseDirs) {
                    sourceSetsBaseDir = sourceSetsBaseDir.canonicalFile
                    if (!allSourceDirs.contains(sourceSetsBaseDir)) {
                        invalidSourceDirs.add(sourceSetsBaseDir)
                        break
                    }

                    List<File> sourceDirs = getSubDirs(sourceSetsBaseDir)
                    for (File sourceDir : sourceDirs) {
                        sourceDir = sourceDir.canonicalFile
                        if (!allSourceDirs.contains(sourceDir)) {
                            invalidSourceDirs.add(sourceDir)
                        }
                    }
                }

                if (!invalidSourceDirs.isEmpty()) {
                    throw new GradleException("There are source directories that are not a part of any source sets:\n  ${invalidSourceDirs.join('\n  ')}")
                }
            }
        }

        tasks.named('check').configure { dependsOn(checkSourceDirs) }
    }
}
