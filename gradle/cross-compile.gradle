import static com.vdurmont.semver4j.Semver.SemverType
import static java.util.Comparator.reverseOrder
import static org.gradle.api.attributes.Category.CATEGORY_ATTRIBUTE
import static org.gradle.api.attributes.Category.DOCUMENTATION
import static org.gradle.api.attributes.Category.ENFORCED_PLATFORM
import static org.gradle.api.attributes.Category.REGULAR_PLATFORM
import static org.gradle.api.attributes.Category.VERIFICATION

import com.vdurmont.semver4j.Semver
import java.util.regex.Matcher
import java.util.regex.Pattern
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.tree.AnnotationNode
import org.objectweb.asm.tree.ClassNode

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath "com.vdurmont:semver4j:${rootBuildscriptClasspathVersionOf('com.vdurmont:semver4j')}"
        classpath platform("org.ow2.asm:asm-bom:${rootBuildscriptClasspathVersionOf('org.ow2.asm:asm-bom')}")
        classpath 'org.ow2.asm:asm-tree'
    }
    repositories {
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    Collection<Project> crossCompileProjects = project.subprojects
        .findAll { it.parent == project }
        .findAll { it.name.startsWith('cross-compile--') }

    crossCompileProjects.forEach { crossCompileProject ->
        if (!crossCompileProject.subprojects.isEmpty()) {
            throw new GradleException("Cross-compile project ${crossCompileProject} can't have subprojects")
        }
    }

    crossCompileProjects.forEach { crossCompileProject ->
        ; [
            'maven-publish',
        ].forEach { forbiddenPluginId ->
            crossCompileProject.pluginManager.withPlugin(forbiddenPluginId) { appliedPlugin ->
                throw new GradleException("${appliedPlugin.id} plugin can't applied for cross-compile project ${crossCompileProject}")
            }
        }
    }

    pluginManager.withPlugin('java') {
        crossCompileProjects.forEach { crossCompileProject ->
            Pattern pattern = Pattern.compile(/^cross-compile--(common|(.+)-(\d+(?:\.\d+)*)-(lt|lte|eq|gte|gt))$/)
            Matcher matcher = pattern.matcher(crossCompileProject.name)
            if (!matcher.matches()) {
                throw new GradleException("Project name of cross-compile project ${crossCompileProject} doesn't match to /${pattern}/")
            }

            crossCompileProject.apply plugin: 'java-library'
            crossCompileProject.apply plugin: 'name.remal.test-source-sets'

            project.fatJarWith(crossCompileProject)

            crossCompileProject.configurations.matching { ['api', 'implementation'].contains(it.name) }.all { Configuration conf ->
                conf.allDependencies.all { Dependency dependency ->
                    String category = dependency.attributes.getAttribute(CATEGORY_ATTRIBUTE)?.name
                    if (![REGULAR_PLATFORM, ENFORCED_PLATFORM, DOCUMENTATION, VERIFICATION].contains(category)) {
                        throw new GradleException("Can't add ${dependency} dependcency to cross-compile project $crossCompileProject '${conf.name}' configuration, as this configuration can't have dependencies")
                    }
                }
            }

            String fullSpec = matcher.group(1)
            String dependency = matcher.group(2)
            String dependencyVersion = matcher.group(3)
            String dependencyVersionOperator = matcher.group(4)
            if (fullSpec == 'common') {
                dependencies {
                    compileOnlyAll project(crossCompileProject.path)
                }

            } else {
                crossCompileProjects.find { it.name == "cross-compile--common" }?.with { commonProject ->
                    crossCompileProject.dependencies {
                        compileOnly project(commonProject.path)
                    }
                }

                if (dependency == 'java') {
                    if (!dependencyVersion.matches(/^\d+$/)) {
                        throw new GradleException("Invalid Java version for cross-compile project $crossCompileProject (only major versions are supported): $dependencyVersion")
                    }
                    int majorVersion = Integer.parseInt(dependencyVersion)
                    JavaVersion javaVersion = JavaVersion.toVersion(majorVersion)
                    crossCompileProject.sourceCompatibility = crossCompileProject.targetCompatibility = javaVersion.toString()

                } else if (dependency == 'gradle') {
                    Semver gradleSemver = new Semver(dependencyVersion, SemverType.LOOSE)
                    int gradleVersionNumbers = dependencyVersion.count('.') + 1
                    Closure<Semver> alignGradleSemver = { Semver ver ->
                        List<String> parts = ver.toString().split(/\./).toList()
                        parts = parts.subList(0, Math.min(parts.size(), gradleVersionNumbers))
                        return new Semver(parts.join('.'), SemverType.LOOSE)
                    }
                    List<Semver> allGradleSemvers = project.getAllGradleVersions()
                        .collect { it.baseVersion }
                        .toUnique()
                        .toSorted(reverseOrder())
                        .collect { new Semver(it.version, SemverType.LOOSE) }
                    if (dependencyVersionOperator == 'lt') {
                        for (Semver currentGradleSemver : allGradleSemvers) {
                            if (alignGradleSemver(currentGradleSemver) < gradleSemver) {
                                gradleSemver = currentGradleSemver
                                break
                            }
                        }
                    } else if (dependencyVersionOperator == 'lte') {
                        for (Semver currentGradleSemver : allGradleSemvers) {
                            if (alignGradleSemver(currentGradleSemver) <= gradleSemver) {
                                gradleSemver = currentGradleSemver
                                break
                            }
                        }
                    } else if (dependencyVersionOperator == 'eq') {
                        for (Semver currentGradleSemver : allGradleSemvers) {
                            if (alignGradleSemver(currentGradleSemver).version == dependencyVersion) {
                                gradleSemver = currentGradleSemver
                                break
                            }
                        }
                    } else if (dependencyVersionOperator == 'gte') {
                        for (Semver currentGradleSemver : allGradleSemvers) {
                            if (alignGradleSemver(currentGradleSemver) >= gradleSemver) {
                                gradleSemver = currentGradleSemver
                            } else {
                                break
                            }
                        }
                    } else if (dependencyVersionOperator == 'gt') {
                        for (Semver currentGradleSemver : allGradleSemvers) {
                            if (alignGradleSemver(currentGradleSemver) > gradleSemver) {
                                gradleSemver = currentGradleSemver
                            } else {
                                break
                            }
                        }
                    } else {
                        throw new GradleException("Unsupported dependency version operator: ${crossCompileProject.name}")
                    }

                    crossCompileProject.configurations.create('crossCompileGradleApi') { Configuration conf ->
                        conf.canBeResolved = false
                        conf.canBeConsumed = false
                        crossCompileProject.configurations.optionalHidden.extendsFrom(conf)
                    }

                    crossCompileProject.configurations.matching { !['crossCompileGradleApi', 'crossCompileGradleApiTransitive'].contains(it.name) }.all { Configuration conf ->
                        conf.dependencies.all { Dependency dep ->
                            if (dep.group == 'name.remal.gradle-api') {
                                conf.dependencies.remove(dep)
                            }
                        }
                    }

                    crossCompileProject.dependencies {
                        crossCompileGradleApi('name.remal.gradle-api:local-groovy') { transitive = true }
                        crossCompileGradleApi('name.remal.gradle-api:gradle-api') { transitive = false }
                        crossCompileGradleApi('name.remal.gradle-api:gradle-test-kit') { transitive = false }

                        constraints {
                            projectDependencyConstraints("name.remal.gradle-api:local-groovy:${gradleSemver}") { version { strictly(gradleSemver.toString()) } }
                            projectDependencyConstraints("name.remal.gradle-api:gradle-api:${gradleSemver}") { version { strictly(gradleSemver.toString()) } }
                            projectDependencyConstraints("name.remal.gradle-api:gradle-test-kit:${gradleSemver}") { version { strictly(gradleSemver.toString()) } }
                        }
                    }

                    crossCompileProject.configurations.create('crossCompileGradleApiTransitive') { Configuration conf ->
                        conf.canBeResolved = false
                        conf.canBeConsumed = false
                        conf.defaultDependencies { DependencySet deps ->
                            deps.addAll(
                                crossCompileProject.configurations.crossCompileGradleApi.dependencies.toList().collect { Dependency dep ->
                                    dep = dep.copy()
                                    if (dep instanceof ModuleDependency) {
                                        dep.transitive = true
                                    }
                                    return dep
                                }
                            )
                        }
                    }
                }

                crossCompileProject.tasks.withType(AbstractCompile).configureEach { AbstractCompile task ->
                    doLast {
                        task.destinationDirectory.asFileTree
                            .matching { include('**/*.class') }
                            .matching { exclude('module-info.class') }
                            .visit { FileVisitDetails details ->
                                if (details.directory) return

                                File file = details.file
                                ClassReader classReader = new ClassReader(file.bytes)
                                ClassNode classNode = new ClassNode()
                                classReader.accept(classNode, 0)

                                List<AnnotationNode> annotations = classNode.invisibleAnnotations ?: []
                                if (annotations.any { it.desc.endsWith('/RemalGradlePluginsCrossCompilation;') }) return
                                AnnotationNode annotation = new AnnotationNode('Lname/remal/gradleplugins/toolkit/internal/RemalGradlePluginsCrossCompilation;')
                                annotation.values = [
                                    'dependency', dependency,
                                    'version', dependencyVersion,
                                    'versionOperator', dependencyVersionOperator ?: '',
                                ]
                                annotations.add(annotation)
                                classNode.invisibleAnnotations = annotations

                                ClassWriter classWriter = new ClassWriter(classReader, 0)
                                classNode.accept(classWriter)
                                byte[] bytecode = classWriter.toByteArray()
                                file.bytes = bytecode
                            }
                    }
                }
            }
        }
    }
}
