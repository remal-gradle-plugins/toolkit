if (project.isBuildSrcProject) {
    return
}

allprojects {
    pluginManager.withPlugin('java') {
        if (project.name.contains('--')) {
            configurations.create('classesRelocation') { Configuration conf ->
                conf.visible = false
                conf.canBeResolved = false
                conf.canBeConsumed = false
                configurations.compileOnly.extendsFrom(conf)
            }
            return
        }

        apply plugin: 'name.remal.classes-relocation'
    }

    pluginManager.withPlugin('name.remal.classes-relocation') {
        classesRelocation {
            basePackageForRelocatedClasses.set(provider { "${project.calculateBaseJavaPackage()}.internal._relocated" })
        }

        pluginManager.withPlugin('name.remal.build-time-constants') {
            buildTimeConstants.properties([
                'classesRelocation.basePackageForRelocatedClasses': provider { classesRelocation.basePackageForRelocatedClasses.get() }
            ])
        }

        dependencies {
            classesRelocation 'org.apache.commons:commons-lang3:3.18.0'
            classesRelocation 'org.apache.commons:commons-text:1.14.0'
            classesRelocation 'org.apache.commons:commons-collections4:4.5.0'
            classesRelocation 'com.google.guava:guava:33.5.0-jre'
        }

        Closure<Boolean> isRelocationConfiguration = { Configuration conf ->
            return ['classesRelocation', 'classesRelocationClasspath', 'relocateClasses'].contains(conf.name)
        }

        configurations.matching { isRelocationConfiguration(it) }.configureEach { Configuration conf ->
            ; [
                [group: 'org.jspecify', module: 'jspecify'],
                [group: 'com.google.code.findbugs', module: 'jsr305'],
                [group: 'org.jetbrains', module: 'annotations'],
                [group: 'com.github.spotbugs', module: 'spotbugs-annotations'],
                [group: 'com.google.errorprone', module: 'error_prone_annotations'],
                [group: 'com.google.j2objc', module: 'j2objc-annotations'],
                [group: 'org.checkerframework', module: 'checker-qual'],
            ].forEach { exclusion ->
                conf.dependencies.configureEach { dep ->
                    if (dep instanceof ModuleDependency) {
                        dep.exclude(exclusion)
                    }
                }
            }
        }

        pluginManager.withPlugin('java-gradle-plugin') {
            configurations.matching { isRelocationConfiguration(it) }.configureEach { Configuration conf ->
                ; [
                    [group: 'org.slf4j'],
                    [group: 'log4j', module: 'log4j'],
                    [group: 'commons-logging', module: 'commons-logging'],
                    [group: 'ch.qos.logback'],
                    [group: 'org.springframework', module: 'spring-jcl'],
                ].forEach { exclusion ->
                    conf.dependencies.configureEach { dep ->
                        if (dep instanceof ModuleDependency) {
                            dep.exclude(exclusion)
                        }
                    }
                }
            }
        }
    }
}
