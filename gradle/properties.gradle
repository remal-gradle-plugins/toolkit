import java.util.stream.Stream
import org.gradle.util.GradleVersion

allprojects {
    File rootProjectDir = project.rootProjectDir

    if (project.isBuildSrcProject) {
        Properties props = new Properties()
        File gradlePropertiesFile = new File(rootProjectDir, 'gradle.properties')
        if (gradlePropertiesFile.isFile()) {
            gradlePropertiesFile.newInputStream().withCloseable { props.load(it) }
        }
        props.forEach { key, value ->
            if (!rootProject.hasProperty(key)) {
                rootProject.ext[key] = value
            }
        }
    }

    File ciPropertiesFile = new File(rootProjectDir, 'build/gradle-ci.properties')
    synchronized (rootProject) {
        if (!rootProject.hasProperty('ciProperties')) {
            Properties props = new Properties()
            rootProject.ext['ciProperties'] = props
            if (ciPropertiesFile.isFile()) {
                ciPropertiesFile.newInputStream().withCloseable { props.load(it) }
            }
        }
    }

    Closure<String> getCiProperty = project.ext.getCiProperty = { String name, Object defaultValue = null, boolean storeValue = false ->
        Properties ciProperties = rootProject.ext['ciProperties']

        String value = Stream.of(name)
            .flatMap { Stream.of(it, 'remal-gradle-plugins.' + it) }
            .flatMap {
                Stream.of(
                    ciProperties.getProperty(name),
                    project.findProperty(it)?.toString(),
                    System.getProperty(it),
                    System.getenv(it.replaceAll(/\W/, '_').toUpperCase()),
                )
            }
            .filter { it != null }
            .findFirst()
            .orElse(null)

        if (value != null) {
            if (storeValue) {
                ciProperties.setProperty(name, value)
                synchronized (rootProject) {
                    ciPropertiesFile.parentFile.mkdirs()
                    ciPropertiesFile.newOutputStream().withCloseable { ciProperties.store(it, null) }
                }
            }
            return value
        }

        defaultValue = project.unwrapProviders(defaultValue)
        return defaultValue?.toString()
    }


    project.ext['java-build.version'] = getCiProperty('java-build.version') {
        File gradleDaemonJvmPropertiesFile = new File(rootProjectDir, 'gradle/gradle-daemon-jvm.properties')
        if (gradleDaemonJvmPropertiesFile.isFile()) {
            Properties props = new Properties()
            gradleDaemonJvmPropertiesFile.newInputStream().withCloseable { props.load(it) }

            String toolchainVersion = props.getProperty('toolchainVersion')
            if (!toolchainVersion?.isEmpty()) {
                return toolchainVersion
            }
        }

        return JavaVersion.current().majorVersion
    }


    if (rootProject.findProperty('isJavaRuntimeVersionSet') == null) {
        rootProject.ext.isJavaRuntimeVersionSet = getCiProperty('java-runtime.version', null) != null
    }
    if (rootProject.findProperty('isGradleApiVersionSet') == null) {
        rootProject.ext.isGradleApiVersionSet = getCiProperty('gradle-api.version', null) != null
    }

    project.ext['java-runtime.version'] = getCiProperty('java-runtime.version', JavaVersion.current().majorVersion)
    project.ext['java-runtime.min-version'] = getCiProperty('java-runtime.min-version', JavaVersion.current().majorVersion)
    project.ext['gradle-api.version'] = getCiProperty('gradle-api.version', GradleVersion.current().version)
    project.ext['gradle-api.min-version'] = getCiProperty('gradle-api.min-version', GradleVersion.current().version)

    project.ext.javaRuntimeVersion = JavaVersion.toVersion(project.ext['java-runtime.version'])
    project.ext.javaRuntimeMinVersion = JavaVersion.toVersion(project.ext['java-runtime.min-version'])
    project.ext.gradleApiVersion = GradleVersion.version(project.ext['gradle-api.version'])
    project.ext.gradleApiMinVersion = GradleVersion.version(project.ext['gradle-api.min-version'])

    project.ext['git-ref'] = getCiProperty('git-ref', '')
    project.ext['git-sha'] = getCiProperty('git-sha', '')

    project.ext['github-actions-token'] = getCiProperty('push-back-token', { getCiProperty('github-actions-token', '') })
    project.ext['github-actions-run-id'] = getCiProperty('github-actions-run-id', '')
    project.ext['github-actions-run-attempt'] = getCiProperty('github-actions-run-attempt', '')
    project.ext['github-actions-job'] = getCiProperty('github-actions-job', '')
    project.ext['github-actions-job-index'] = getCiProperty('github-actions-job-index', '0')

    project.ext['disable-compilation'] = getCiProperty('disable-compilation', 'false')
    project.ext['disable-tests'] = getCiProperty('disable-tests', 'false')
    project.ext['disable-verification'] = getCiProperty('disable-verification', 'false')
    project.ext['disable-verification-except-tests'] = getCiProperty('disable-verification-except-tests', 'false')

    project.ext['rerun-tests'] = getCiProperty('rerun-tests', 'false')

    String currentVersion = project.version.toString()
    if (currentVersion == 'unspecified') {
        project.version = '0-SNAPSHOT'
        project.ext['majorVersion'] = '0'
    } else if (currentVersion.matches(/^(0|[1-9]\d*)(\D.*)?$/)) {
        project.ext['majorVersion'] = currentVersion.replaceFirst(/^(\d+).*/, '$1')
    } else {
        throw new GradleException("Can't extract major version for version '$currentVersion'")
    }
}
