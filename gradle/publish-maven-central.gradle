if (project.isBuildSrcProject) {
    return
}

allprojects {
    pluginManager.withPlugin('maven-publish') {
        rootProject.apply plugin: 'io.github.gradle-nexus.publish-plugin'
    }

    pluginManager.withPlugin('io.github.gradle-nexus.publish-plugin') {
        nexusPublishing {
            repositories {
                sonatype {
                    nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
                    snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
                }
            }
        }

        nexusPublishing.repositories.all { repo ->
            tasks.register("publishTo${repo.name.capitalize()}ThenCloseAndReleaseStagingRepository") {
                group = 'publishing'
                dependsOn("publishTo${repo.name.capitalize()}")
                dependsOn("closeAndRelease${repo.name.capitalize()}StagingRepository")
            }
        }
    }
}


File flagFile = project.layout.buildDirectory.file('publish-maven-central.flag').get().asFile
flagFile.delete()
allprojects {
    pluginManager.withPlugin('io.github.gradle-nexus.publish-plugin') {
        flagFile.parentFile.mkdirs()
        flagFile.createNewFile()
    }
}
