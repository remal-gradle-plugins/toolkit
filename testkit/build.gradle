apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.generate-sources'

dependencies {
    optional platform('org.junit:junit-bom:5.13.4')
    optional 'org.junit.jupiter:junit-jupiter-api'
    optional 'name.remal.gradle-api:gradle-test-kit'

    api project(':toolkit')
    api 'name.remal.gradle-plugins.generate-sources:generators:2.0.0'


    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.platform:junit-platform-testkit'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

generateSources.forMainSourceSet.java {
    Set<ResolvedDependency> settingsBuildscriptClasspathDependencies = project.settingsBuildscriptClasspathDependencies
    Set<ResolvedArtifact> settingsBuildscriptClasspathArtifacts = project.settingsBuildscriptClasspathArtifacts
    withInputFiles('settingsBuildscriptClasspathArtifacts', settingsBuildscriptClasspathArtifacts.collect { it.file })

    classFile("${project.calculateBaseJavaPackage()}.functional", 'GradleSettingsPluginVersions') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("com.google.common.collect.ImmutableMap")
        addImport("java.util.Map")
        addImport("lombok.NoArgsConstructor")

        line("@NoArgsConstructor(access = PRIVATE)")
        block("public abstract class ${simpleName}") {
            line()
            line("private static final Map<String, String> VERSIONS = ImmutableMap.<String, String>builder()")
            indent {
                settingsBuildscriptClasspathDependencies.forEach { ResolvedDependency dep ->
                    line(".put(\"${escapeString("${dep.moduleGroup}:${dep.moduleName}")}\", \"${escapeString(dep.moduleVersion)}\")")
                }
                line(".build();")
            }

            line()
            block("public static String getSettingsBuildscriptClasspathDependencyVersion(String id)") {
                line("var version = VERSIONS.get(id);")
                block("if (version == null)") {
                    line("throw new IllegalStateException(\"Settings buildscript dependency is not registered: \" + id);")
                }
                line("return version;")
            }

            line()
        }
    }
}
