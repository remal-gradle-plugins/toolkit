int typedMethodMaxParamsCount = 15

class ThisScriptLocation {}

generateSources.forMainSourceSet.java {
    inputs.dir(getClassLocationFile(ThisScriptLocation)).withNormalizer(ClasspathNormalizer).optional()

    String baseJavaPackage = project.calculateBaseJavaPackage()

    classFile("${baseJavaPackage}.reflection", 'MembersFinder') {
        addStaticImport('lombok.AccessLevel', 'PRIVATE')

        addImport('java.util.Optional')
        addImport('lombok.NoArgsConstructor')
        addImport('org.jspecify.annotations.Nullable')

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
        block("public abstract class ${simpleName}") {
            // get*() methods:
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedMethod${paramsCount}<T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> getMethod(Class<T> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.getMethod(type, false, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return new TypedMethod${paramsCount}<>(method);")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedVoidMethod${paramsCount}<T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> getMethod(Class<T> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.getMethod(type, false, null, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return new TypedVoidMethod${paramsCount}<>(method);")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedStaticMethod${paramsCount}<R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> getStaticMethod(Class<?> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.getMethod(type, true, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return new TypedStaticMethod${paramsCount}<>(method);")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static ${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} TypedStaticVoidMethod${paramsCount}${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} getStaticMethod(Class<?> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.getMethod(type, true, null, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return new TypedStaticVoidMethod${paramsCount}${paramsCount == 0 ? '' : '<>'}(method);")
                }
            }

            // find*() methods:
            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nullable")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedMethod${paramsCount}<T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> findMethod(Class<T> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.findMethod(type, false, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return method != null ? new TypedMethod${paramsCount}<>(method) : null;")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nullable")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedVoidMethod${paramsCount}<T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> findMethod(Class<T> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.findMethod(type, false, null, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return method != null ? new TypedVoidMethod${paramsCount}<>(method) : null;")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nullable")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> TypedStaticMethod${paramsCount}<R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> findStaticMethod(Class<?> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.findMethod(type, true, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return method != null ? new TypedStaticMethod${paramsCount}<>(method) : null;")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nullable")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static ${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} TypedStaticVoidMethod${paramsCount}${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} findStaticMethod(Class<?> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("var method = MembersFinderHelpers.findMethod(type, true, null, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")});")
                    line("return method != null ? new TypedStaticVoidMethod${paramsCount}${paramsCount == 0 ? '' : '<>'}(method) : null;")
                }
            }

            // getOptional*() methods:
            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> Optional<TypedMethod${paramsCount}<T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}>> getOptionalMethod(Class<T> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("return Optional.ofNullable(findMethod(type, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")}));")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> Optional<TypedVoidMethod${paramsCount}<T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}>> getOptionalMethod(Class<T> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("return Optional.ofNullable(findMethod(type, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")}));")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> Optional<TypedStaticMethod${paramsCount}<R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}>> getOptionalStaticMethod(Class<?> type, Class<R> returnType, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("return Optional.ofNullable(findStaticMethod(type, returnType, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")}));")
                }
            }

            line()
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static ${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} Optional<TypedStaticVoidMethod${paramsCount}${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'}> getOptionalStaticMethod(Class<?> type, String name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<P$it> paramType$it" }.join("")})") {
                    line("return Optional.ofNullable(findStaticMethod(type, name${paramsCount == 0 ? '' : (1..paramsCount).collect { ", paramType$it" }.join("")}));")
                }
            }

            line()
        }
    }

    classFile("${baseJavaPackage}.reflection", 'MethodsInvoker') {
        addStaticImport('javax.annotation.meta.When', 'UNKNOWN')
        addStaticImport('lombok.AccessLevel', 'PRIVATE')

        addImport('javax.annotation.Nonnull')
        addImport('lombok.NoArgsConstructor')

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("unchecked", "checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
        block("public abstract class ${simpleName}") {
            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nonnull(when = UNKNOWN)")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> R invokeMethod(T target, Class<R> returnType, String methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<? extends P$it> paramType$it, @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("var method = MembersFinder.getMethod((Class<T>) target.getClass(), returnType, methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", (Class<P$it>) paramType$it" }.join("")});")
                    line("return method.invoke(target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                }
            }

            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> void invokeMethod(T target, String methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<? extends P$it> paramType$it, @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("var method = MembersFinder.getMethod((Class<T>) target.getClass(), methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", (Class<P$it>) paramType$it" }.join("")});")
                    line("method.invoke(target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                }
            }

            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                line("@Nonnull(when = UNKNOWN)")
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static <R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> R invokeStaticMethod(Class<?> type, Class<R> returnType, String methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<? extends P$it> paramType$it, @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("var method = MembersFinder.getStaticMethod(type, returnType, methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", (Class<P$it>) paramType$it" }.join("")});")
                    line("return method.invoke(${paramsCount == 0 ? '' : (1..paramsCount).collect { "param$it" }.join(", ")});")
                }
            }

            (0..typedMethodMaxParamsCount).forEach { paramsCount ->
                line()
                if (paramsCount >= 2) {
                    line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
                }
                block("public static ${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} void invokeStaticMethod(Class<?> type, String methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", Class<? extends P$it> paramType$it, @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("var method = MembersFinder.getStaticMethod(type, methodName${paramsCount == 0 ? '' : (1..paramsCount).collect { ", (Class<P$it>) paramType$it" }.join("")});")
                    line("method.invoke(${paramsCount == 0 ? '' : (1..paramsCount).collect { "param$it" }.join(",")});")
                }
            }

            line()
        }
    }

    (0..typedMethodMaxParamsCount).forEach { paramsCount ->
        classFile("${baseJavaPackage}.reflection", "TypedMethod${paramsCount}") {
            addStaticImport('javax.annotation.meta.When', 'UNKNOWN')
            addStaticImport("${baseJavaPackage}.ThrowableUtils", 'unwrapReflectionException')
            addStaticImport("${baseJavaPackage}.reflection.ReflectionUtils", 'isStatic')

            addImport('java.lang.reflect.Method')
            addImport('javax.annotation.Nonnull')
            addImport('lombok.SneakyThrows')

            suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
            if (paramsCount >= 2) {
                line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
            }
            block("public final class ${simpleName}<T, R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> extends AbstractTypedMethod") {
                line()

                block("${simpleName}(Method method)") {
                    line("super(method);")
                    block("if (isStatic(method))") {
                        line("throw new IllegalArgumentException(\"Static method: \" + method);")
                    }
                }

                line()
                line("@Nonnull(when = UNKNOWN)")
                line("@SneakyThrows")
                suppressWarningsLine("unchecked")
                block("public R invoke(T target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("try {")
                    line("    return (R) method.invoke(target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                    line("} catch (Throwable e) {")
                    line("    throw unwrapReflectionException(e);")
                    line("}")
                }

                line()
            }
        }

        classFile("${baseJavaPackage}.reflection", "TypedVoidMethod${paramsCount}") {
            addStaticImport('javax.annotation.meta.When', 'UNKNOWN')
            addStaticImport("${baseJavaPackage}.ThrowableUtils", 'unwrapReflectionException')
            addStaticImport("${baseJavaPackage}.reflection.ReflectionUtils", 'isStatic')

            addImport('java.lang.reflect.Method')
            addImport('javax.annotation.Nonnull')
            addImport('lombok.SneakyThrows')

            suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
            if (paramsCount >= 2) {
                line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
            }
            block("public final class ${simpleName}<T${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> extends AbstractTypedMethod") {
                line()

                block("${simpleName}(Method method)") {
                    line("super(method);")
                    block("if (isStatic(method))") {
                        line("throw new IllegalArgumentException(\"Static method: \" + method);")
                    }
                }

                line()
                line("@SneakyThrows")
                block("public void invoke(T target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", @Nonnull(when = UNKNOWN) P$it param$it" }.join("")})") {
                    line("try {")
                    line("    method.invoke(target${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                    line("} catch (Throwable e) {")
                    line("    throw unwrapReflectionException(e);")
                    line("}")
                }

                line()
            }
        }

        classFile("${baseJavaPackage}.reflection", "TypedStaticMethod${paramsCount}") {
            addStaticImport('javax.annotation.meta.When', 'UNKNOWN')
            addStaticImport("${baseJavaPackage}.ThrowableUtils", 'unwrapReflectionException')
            addStaticImport("${baseJavaPackage}.reflection.ReflectionUtils", 'isNotStatic')

            addImport('java.lang.reflect.Method')
            addImport('javax.annotation.Nonnull')
            addImport('lombok.SneakyThrows')

            suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
            if (paramsCount >= 2) {
                line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
            }
            block("public final class ${simpleName}<R${paramsCount == 0 ? '' : (1..paramsCount).collect { ", P$it" }.join("")}> extends AbstractTypedMethod") {
                line()

                block("${simpleName}(Method method)") {
                    line("super(method);")
                    block("if (isNotStatic(method))") {
                        line("throw new IllegalArgumentException(\"Not a static method: \" + method);")
                    }
                }

                line()
                line("@Nonnull(when = UNKNOWN)")
                line("@SneakyThrows")
                suppressWarningsLine("unchecked")
                block("public R invoke(${paramsCount == 0 ? '' : (1..paramsCount).collect { "@Nonnull(when = UNKNOWN) P$it param$it" }.join(", ")})") {
                    line("try {")
                    line("    return (R) method.invoke(null${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                    line("} catch (Throwable e) {")
                    line("    throw unwrapReflectionException(e);")
                    line("}")
                }

                line()
            }
        }

        classFile("${baseJavaPackage}.reflection", "TypedStaticVoidMethod${paramsCount}") {
            addStaticImport('javax.annotation.meta.When', 'UNKNOWN')
            addStaticImport("${baseJavaPackage}.ThrowableUtils", 'unwrapReflectionException')
            addStaticImport("${baseJavaPackage}.reflection.ReflectionUtils", 'isNotStatic')

            addImport('java.lang.reflect.Method')
            addImport('javax.annotation.Nonnull')
            addImport('lombok.SneakyThrows')

            suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "java:S107", "java:S1128", "java:S1611")
            if (paramsCount >= 2) {
                line("@name.remal.gradle_plugins.toolkit.annotations.internal.Generated")
            }
            block("public final class ${simpleName}${paramsCount == 0 ? '' : '<' + (1..paramsCount).collect { "P$it" }.join(", ") + '>'} extends AbstractTypedMethod") {
                line()

                block("${simpleName}(Method method)") {
                    line("super(method);")
                    block("if (isNotStatic(method))") {
                        line("throw new IllegalArgumentException(\"Not a static method: \" + method);")
                    }
                }

                line()
                line("@SneakyThrows")
                block("public void invoke(${paramsCount == 0 ? '' : (1..paramsCount).collect { "@Nonnull(when = UNKNOWN) P$it param$it" }.join(", ")})") {
                    line("try {")
                    line("    method.invoke(null${paramsCount == 0 ? '' : (1..paramsCount).collect { ", param$it" }.join("")});")
                    line("} catch (Throwable e) {")
                    line("    throw unwrapReflectionException(e);")
                    line("}")
                }

                line()
            }
        }
    }
}
