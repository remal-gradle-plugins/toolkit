apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.generate-sources'

; [
    'build-generate-checkstyle.xsl.gradle',
    'build-generate-CorePluginConfigurationCacheSupport.gradle',
    'build-generate-GradleCompatibilityJava.gradle',
    'build-generate-MembersFinder.gradle',
    'build-generate-SneakyThrowUtils.gradle',
].forEach { fileName ->
    apply from: fileName
    tasks.named('generateJava').configure { it.inputs.file(fileName) }
    tasks.named('generateResources').configure { it.inputs.file(fileName) }
}

dependencies {
    classesRelocation 'io.github.classgraph:classgraph:4.8.179'
    classesRelocation 'org.ec4j.core:ec4j-core:1.1.0'
    classesRelocation 'net.htmlparser.jericho:jericho-html:3.4'
    classesRelocation('org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r') {
        exclude group: 'org.slf4j'
    }


    testImplementation project(':testkit')
    testImplementation 'io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:1.1.7'
    testImplementation 'com.softeq.gradle.itest:com.softeq.gradle.itest.gradle.plugin:1.0.4'
    testImplementation 'org.unbroken-dome.test-sets:org.unbroken-dome.test-sets.gradle.plugin:4.1.0'


    components {
        withModule('org.unbroken-dome.gradle-plugins:gradle-testsets-plugin', TargetJvmVersionRule) { params(8) }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.fatJarWith(project(':toolkit-annotations'))

project.fatJarWith(project(':toolkit:fat-jar--latest-lts-jdk'))

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') { Task it ->
    Property<String> toolkitGroupId = project.objects.property(String).value(provider { project.group?.toString() }).with { it.finalizeValueOnRead(); it }
    Property<String> toolkitArtifactId = project.objects.property(String).value(provider { project.name }).with { it.finalizeValueOnRead(); it }
    Property<String> toolkitVersion = project.objects.property(String).value(provider { project.version?.toString() }).with { it.finalizeValueOnRead(); it }
    inputs.property('toolkitGroupId', toolkitGroupId).optional(true)
    inputs.property('toolkitArtifactId', toolkitArtifactId).optional(true)
    inputs.property('toolkitVersion', toolkitVersion).optional(true)
    classFile(project.calculateBaseJavaPackage(), 'ToolkitBuildInfo') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("lombok.NoArgsConstructor")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeBlock("abstract class ${it.simpleName}") {
            it.println("public static final String TOOLKIT_GROUP_ID = \"${it.escapeJava(toolkitGroupId.get())}\";")
            it.println("public static final String TOOLKIT_ARTIFACT_IT = \"${it.escapeJava(toolkitArtifactId.get())}\";")
            it.println("public static final String TOOLKIT_VERSION = \"${it.escapeJava(toolkitVersion.get())}\";")
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration saxonConf = configurations.create('saxon') {
    dependencies.add(project.dependencies.create('net.sf.saxon:Saxon-HE:12.5'))
}

TaskProvider testXsltWithSaxon = tasks.register('testXsltWithSaxon', Test) {
    TaskProvider<Test> testProvider = tasks.named('test', Test)
    dependsOn(testProvider)

    classpath = saxonConf + files(testProvider.map { it.classpath })
    testClassesDirs = files(testProvider.map { it.testClassesDirs })

    onlyIf {
        Test test = testProvider.get()
        includes = test.includes
        excludes = test.excludes
        environment = test.environment
        systemProperties = test.systemProperties
        return true
    }

    useJUnitPlatform {
        includeTags = ['xslt']
    }
}

tasks.named('check').configure { dependsOn(testXsltWithSaxon) }

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

@CacheableRule
abstract class TargetJvmVersionRule implements ComponentMetadataRule {

    final Integer jvmVersion

    @Inject
    TargetJvmVersionRule(Integer jvmVersion) {
        this.jvmVersion = jvmVersion
    }

    void execute(ComponentMetadataContext context) {
        context.details.allVariants {
            attributes {
                attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, jvmVersion)
            }
        }
    }

    @Override
    String toString() {
        return "${getClass().simpleName}[$jvmVersion]"
    }

}
