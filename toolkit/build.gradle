apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'name.remal.classes-relocation'
apply plugin: 'name.remal.generate-sources'

; [
    'build-generate-checkstyle.xsl.gradle',
    'build-generate-CorePluginConfigurationCacheSupport.gradle',
    'build-generate-MembersFinder.gradle',
    'build-generate-SneakyThrowUtils.gradle',
].forEach { fileName ->
    apply from: fileName
    tasks.named('generateJava').configure { it.inputs.file(fileName) }
    tasks.named('generateResources').configure { it.inputs.file(fileName) }
}

dependencies {
    relocateClasses 'org.jdom:jdom2'
    relocateClasses 'io.github.classgraph:classgraph:4.8.172'
    relocateClasses 'org.ec4j.core:ec4j-core:0.3.0'
    relocateClasses 'net.htmlparser.jericho:jericho-html:3.4'
    relocateClasses('org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r') {
        exclude group: 'org.slf4j'
    }


    testImplementation project(':testkit')
    testImplementation 'io.spring.dependency-management:io.spring.dependency-management.gradle.plugin:1.1.5'
    testImplementation 'com.softeq.gradle.itest:com.softeq.gradle.itest.gradle.plugin:1.0.4'
    testImplementation 'org.unbroken-dome.test-sets:org.unbroken-dome.test-sets.gradle.plugin:4.1.0'


    components {
        withModule('org.unbroken-dome.gradle-plugins:gradle-testsets-plugin', TargetJvmVersionRule) { params(8) }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.fatJarWith(project(':toolkit-annotations'))

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') { Task it ->
    inputs.property('project.group', project.group)
    inputs.property('project.name', project.name)
    inputs.property('project.version', project.version)
    classFile(project.calculateBaseJavaPackage(), 'ToolkitBuildInfo') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("lombok.NoArgsConstructor")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeBlock("abstract class ${it.simpleName}") {
            it.println("public static final String TOOLKIT_GROUP_ID = \"${it.escapeJava(project.group)}\";")
            it.println("public static final String TOOLKIT_ARTIFACT_IT = \"${it.escapeJava(project.name)}\";")
            it.println("public static final String TOOLKIT_VERSION = \"${it.escapeJava(project.version)}\";")
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration saxonConf = configurations.create('saxon') {
    dependencies.add(project.dependencies.create('net.sf.saxon:Saxon-HE:12.4'))
}

TaskProvider testXsltWithSaxon = tasks.register('testXsltWithSaxon', Test) {
    // Resolve `test` task to avoid "Relying on conventions for custom Test tasks" error
    // see https://docs.gradle.org/8.7/userguide/upgrading_version_8.html#test_task_default_classpath

    Test test = tasks.named('test', Test).get()
    dependsOn(test)

    classpath = saxonConf + test.classpath
    testClassesDirs = test.testClassesDirs

    onlyIf {
        includes = test.includes
        excludes = test.excludes
        environment = test.environment
        systemProperties = test.systemProperties
        return true
    }

    useJUnitPlatform {
        includeTags = ['xslt']
    }
}

tasks.named('check').configure { dependsOn(testXsltWithSaxon) }

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

@CacheableRule
abstract class TargetJvmVersionRule implements ComponentMetadataRule {

    final Integer jvmVersion

    @Inject
    TargetJvmVersionRule(Integer jvmVersion) {
        this.jvmVersion = jvmVersion
    }

    void execute(ComponentMetadataContext context) {
        context.details.allVariants {
            attributes {
                attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, jvmVersion)
            }
        }
    }

    @Override
    String toString() {
        return "${getClass().simpleName}[$jvmVersion]"
    }

}
