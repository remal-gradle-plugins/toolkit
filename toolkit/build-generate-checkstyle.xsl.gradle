import java.util.stream.Stream

class ThisScriptLocation {}

generateSources.forMainSourceSet.resources {
    inputs.dir(getClassLocationFile(ThisScriptLocation)).withNormalizer(ClasspathNormalizer).optional()

    inputs.files(
        Stream.of(Checkstyle)
            .map { it.protectionDomain?.codeSource?.location?.toURI() }
            .filter { it?.toString()?.startsWith("file:") ?: false }
            .distinct()
            .toList()
    ).withPropertyName('classpathCheckstyle').withNormalizer(ClasspathNormalizer).optional()

    textFile("${project.calculateBaseJavaPackage().replace('.', '/')}/issues/checkstyle.xsl") {
        String resourceName = 'checkstyle-noframes-sorted.xsl'
        InputStream inputStream = Checkstyle.getClassLoader().getResourceAsStream(resourceName)
        if (inputStream == null) {
            throw new IllegalStateException("Resource can't be found: " + resourceName)
        }
        String content = inputStream.getText('UTF-8')

        //content = content.replaceFirst(/(?i)<table[^>]*>[\s\S]*?<h2[^>]*>\s*CheckStyle Audit\s*<\/h2>[\s\S]*?<\/table>\s*<hr[^>]*>\s*/, '')
        content = content.replaceFirst(/(?i)<!--\s*jakarta logo\s*-->[\s\S]*?(<!--\s*Summary part\s*-->)/, '$1')

        content = content.replaceAll(/(<xsl:number\s+)level="[^"]*"\s+(value=[^>]+>)/, '$1$2')

        content = content.replaceAll(/(\s*<th[^>]*>\s*)Line Number(\s*<\/th>)/, '$0$1Rule$2')
        content = content.replaceAll(/(\s*<td[^>]*>\s*)<xsl:value-of select="@line"\/>(\s*<\/td>)/, '$0$1<xsl:value-of select="@source"/>$2')

        content = content.replaceAll(/(<xsl:output[^>]*\/>)/, '$1<xsl:param name="toolName"/>')
        content = content.replaceAll(/(?i)(>[^<]*)\bCheckstyle\b(\s*[^<]*<)/, '$1<xsl:value-of select="\\$toolName"/>$2')

        content = content.replaceAll(/\s*<hr[^>]*\/>\s*<p[^>]*>\s*Generated by [\s\S]*?<\/p>(\s*<\/body>)/, '$1')

        write(content)
    }
}
