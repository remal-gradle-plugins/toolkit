import static java.lang.reflect.Modifier.isAbstract

import com.google.common.reflect.Invokable
import com.google.common.reflect.TypeToken
import java.lang.reflect.Method
import java.lang.reflect.Parameter
import java.lang.reflect.Type
import java.lang.reflect.TypeVariable

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath('com.google.guava:guava:33.3.1-jre') {
            exclude(group: 'com.google.code.findbugs')
            exclude(group: 'org.checkerframework')
            exclude(group: 'com.google.errorprone')
            exclude(group: 'com.google.j2objc')
        }
    }
    repositories {
        mavenCentral()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') {
    List<Class<?>> lambdaClasses = [
        Class.forName('org.gradle.api.Action'),
        Class.forName('java.lang.Runnable'),
        Class.forName('java.util.concurrent.Callable'),
        Class.forName('java.util.Comparator'),
        Class.forName('java.util.function.BiConsumer'),
        Class.forName('java.util.function.BiFunction'),
        Class.forName('java.util.function.BinaryOperator'),
        Class.forName('java.util.function.BiPredicate'),
        Class.forName('java.util.function.BooleanSupplier'),
        Class.forName('java.util.function.Consumer'),
        Class.forName('java.util.function.DoubleBinaryOperator'),
        Class.forName('java.util.function.DoubleConsumer'),
        Class.forName('java.util.function.DoubleFunction'),
        Class.forName('java.util.function.DoublePredicate'),
        Class.forName('java.util.function.DoubleSupplier'),
        Class.forName('java.util.function.DoubleToIntFunction'),
        Class.forName('java.util.function.DoubleToLongFunction'),
        Class.forName('java.util.function.DoubleUnaryOperator'),
        Class.forName('java.util.function.Function'),
        Class.forName('java.util.function.IntBinaryOperator'),
        Class.forName('java.util.function.IntConsumer'),
        Class.forName('java.util.function.IntFunction'),
        Class.forName('java.util.function.IntPredicate'),
        Class.forName('java.util.function.IntSupplier'),
        Class.forName('java.util.function.IntToDoubleFunction'),
        Class.forName('java.util.function.IntToLongFunction'),
        Class.forName('java.util.function.IntUnaryOperator'),
        Class.forName('java.util.function.LongBinaryOperator'),
        Class.forName('java.util.function.LongConsumer'),
        Class.forName('java.util.function.LongFunction'),
        Class.forName('java.util.function.LongPredicate'),
        Class.forName('java.util.function.LongSupplier'),
        Class.forName('java.util.function.LongToDoubleFunction'),
        Class.forName('java.util.function.LongToIntFunction'),
        Class.forName('java.util.function.LongUnaryOperator'),
        Class.forName('java.util.function.ObjDoubleConsumer'),
        Class.forName('java.util.function.ObjIntConsumer'),
        Class.forName('java.util.function.ObjLongConsumer'),
        Class.forName('java.util.function.Predicate'),
        Class.forName('java.util.function.Supplier'),
        Class.forName('java.util.function.ToDoubleBiFunction'),
        Class.forName('java.util.function.ToDoubleFunction'),
        Class.forName('java.util.function.ToIntBiFunction'),
        Class.forName('java.util.function.ToIntFunction'),
        Class.forName('java.util.function.ToLongBiFunction'),
        Class.forName('java.util.function.ToLongFunction'),
        Class.forName('java.util.function.UnaryOperator'),
        Class.forName('java.io.FileFilter'),
        Class.forName('java.io.FilenameFilter'),
        Class.forName('java.nio.file.DirectoryStream$Filter'),
        Class.forName('java.nio.file.PathMatcher'),
    ]

    inputs.files(lambdaClasses.collect { it.protectionDomain?.codeSource?.location }.findAll { it != null }.toSet()).optional()

    classFile(project.calculateBaseJavaPackage(), 'SneakyThrowUtils') {
        it.writePackage()
        it.println("")
        it.writeStaticImport('javax.annotation.meta.When', 'UNKNOWN')
        it.writeStaticImport('lombok.AccessLevel', 'PRIVATE')
        it.println("")
        (lambdaClasses.collect { it.name } + [
            'lombok.Lombok',
            'lombok.NoArgsConstructor',
            'javax.annotation.Nonnull',
            'com.google.errorprone.annotations.CheckReturnValue',
        ])
            .sort()
            .findAll { !it.matches(/^java\.lang\.[^.]+$/) }
            .collect { it.replaceFirst(/^(.+)\$.+$/, '$1') }
            .forEach { name -> it.writeImport(name) }
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeSuppressWarnings("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "checkstyle:OverloadMethodsDeclarationOrder", "overloads", "java:S1611", "java:S6539")
        it.writeBlock("public abstract class ${it.simpleName}") {
            it.println("")
            it.println("/**")
            it.println(" * See {@link Lombok#sneakyThrow(Throwable)}.")
            it.println(" */")
            it.println("@CheckReturnValue")
            it.writeBlock("public static RuntimeException sneakyThrow(Throwable exception)") {
                it.println("return sneakyThrow0(exception);")
            }
            it.println("")
            it.writeSuppressWarnings("unchecked", "TypeParameterUnusedInFormals")
            it.writeBlock("private static <T extends Throwable> T sneakyThrow0(Throwable exception) throws T") {
                it.println("throw (T) exception;")
            }

            Set<String> usedNames = new LinkedHashSet<>()
            lambdaClasses.forEach { lambdaClass ->
                Method method = lambdaClass.methods
                    .findAll {
                        !(it.name == 'equals' && it.parameterTypes == [Object])
                            && !(it.name == 'toString' && it.parameterCount === 0)
                            && !(it.name == 'hashCode' && it.parameterCount === 0)
                    }
                    .find { isAbstract(it.modifiers) }
                if (method == null) {
                    throw new GradleException("Abstract method can't be found for $lambdaClass")
                }

                List<TypeVariable> typeParams = lambdaClass.typeParameters.collect()
                String typeParamsString = typeParams.isEmpty() ? '' : '<' + typeParams.join(', ') + '>'

                Invokable resolvedMethod = TypeToken.of(lambdaClass)
                    .getSupertype(method.declaringClass)
                    .method(method)

                String paramsString = method.parameters.collect().withIndex().collect { Parameter param, int index ->
                    Type type = resolvedMethod.genericParameterTypes[index]
                    boolean isPrimitive = param.type.primitive
                    String annotations = isPrimitive ? '' : '@Nonnull(when = UNKNOWN) '
                    return "${annotations}${type.typeName} ${param.name}"
                }.join(', ')
                String paramNamesString = method.parameters.collect { it.name }.join(', ')

                String originalSimpleName = lambdaClass.name.replaceFirst(/^.+\.([^.]+)$/, '$1').replace('$', '.')
                String resultSimpleName = originalSimpleName.replace('.', '')

                it.println("")
                it.println("")
                it.println("/**")
                it.println(" * Throwing {@link Throwable} alternative for {@link ${originalSimpleName}}.")
                it.println(" */")
                it.println("@FunctionalInterface")
                it.writeBlock("public interface SneakyThrows${resultSimpleName}${typeParamsString}") {
                    if (!resolvedMethod.returnType.primitive) {
                        it.println("@Nonnull(when = UNKNOWN)")
                    }
                    it.println("${resolvedMethod.genericReturnType} ${method.name}($paramsString) throws Throwable;")
                }

                it.println("")
                it.println("@CheckReturnValue")
                it.writeBlock("public static${!typeParamsString.isEmpty() ? ' ' + typeParamsString : ''} ${originalSimpleName}${typeParamsString} sneakyThrows(SneakyThrows${resultSimpleName}${typeParamsString} ${resultSimpleName.uncapitalize()})") {
                    it.println("return ($paramNamesString) -> {")
                    it.println("    try {")
                    it.println("        ${resolvedMethod.genericReturnType != void.class ? 'return ' : ''}${resultSimpleName.uncapitalize()}.${method.name}($paramNamesString);")
                    it.println("    } catch (Throwable exception) {")
                    it.println("        throw sneakyThrow(exception);")
                    it.println("    }")
                    it.println("};")
                }

                if (usedNames.add(resultSimpleName)) {
                    it.println("")
                    it.println("@CheckReturnValue")
                    it.writeBlock("public static${!typeParamsString.isEmpty() ? ' ' + typeParamsString : ''} ${originalSimpleName}${typeParamsString} sneakyThrows${resultSimpleName}(SneakyThrows${resultSimpleName}${typeParamsString} ${resultSimpleName.uncapitalize()})") {
                        it.println("return sneakyThrows(${resultSimpleName.uncapitalize()});")
                    }
                }
            }
        }
    }
}
