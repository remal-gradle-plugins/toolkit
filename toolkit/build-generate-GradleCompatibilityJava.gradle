import org.gradle.util.GradleVersion

generateSources.forMainSourceSet.java {
    String documentationUrl = 'https://docs.gradle.org/current/userguide/compatibility.html'
    outputs.file(project.getCacheFileForDownloadedUrl(documentationUrl)).optional()

    String baseJavaPackage = project.calculateBaseJavaPackage()

    classFile(baseJavaPackage, 'GradleCompatibilityJava') {
        SortedMap<GradleVersion, Integer> compatibility = new TreeMap<>(Comparator.reverseOrder())
        def documentationDocument = loadHtmlFromUrl(documentationUrl)
        def tableElements = documentationDocument.select('h2#java_runtime + .sectionbody table.tableblock')
        if (tableElements.isEmpty()) {
            throw new GradleException("Table node can't be found")
        }
        def trElements = tableElements.select('tr')
        trElements.forEach { trElement ->
            if (!trElement.select('th').isEmpty()) {
                return
            }

            String javaVersion = trElement.select('td:eq(0)').text()
            if (javaVersion.isEmpty()) {
                throw new GradleException("Java version is empty: $trElement")
            }

            String gradleVersion = trElement.select('td:eq(2)').text()
            if (gradleVersion == 'N/A') {
                return
            } else if (gradleVersion.isEmpty()) {
                throw new GradleException("Gradle version is empty: $trElement")
            }

            compatibility[GradleVersion.version(gradleVersion)] = javaVersion.toInteger()
        }

        ; [
            "2.0": 8,
            "5.0": 11,
            "7.3": 17,
            "8.5": 21,
        ].forEach { String gradleVersion, Integer javaVersion ->
            Integer retrievedJavaVersion = compatibility.get(GradleVersion.version(gradleVersion))
            if (retrievedJavaVersion != javaVersion) {
                throw new GradleException("Unexpected Java version for Gradle $gradleVersion: $retrievedJavaVersion")
            }
        }

        addStaticImport('lombok.AccessLevel', 'PRIVATE')
        addStaticImport("${baseJavaPackage}.GradleCompatibilityMode", 'SUPPORTED')
        addStaticImport("${baseJavaPackage}.GradleCompatibilityMode", 'UNKNOWN')
        addStaticImport("${baseJavaPackage}.GradleCompatibilityMode", 'UNSUPPORTED')

        addImport("lombok.NoArgsConstructor")
        addImport("org.gradle.util.GradleVersion")

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "checkstyle:RightCurly", "java:S3776", "java:S131", "java:S1479")
        block("abstract class ${simpleName}") {
            line()

            compatibility.keySet().forEach { GradleVersion gradleVersion ->
                line("private static final GradleVersion GRADLE_${gradleVersion.version.replace('.', '_')} = GradleVersion.version(\"${gradleVersion.version}\");")
            }

            line()
            block("public static GradleCompatibilityMode get(GradleVersion gradleVersion, int javaVersion)") {
                line("gradleVersion = gradleVersion.getBaseVersion();")

                Map.Entry<GradleVersion, Integer> firstEntry = compatibility.firstEntry()
                block("if (gradleVersion.compareTo(GRADLE_${firstEntry.key.version.replace('.', '_')}) > 0)") {
                    block("if (javaVersion <= ${firstEntry.value})") {
                        line("return SUPPORTED;")
                    }
                    line("return UNKNOWN;")
                }

                compatibility.forEach { GradleVersion gradleVersion, Integer javaVersion ->
                    block("else if (gradleVersion.compareTo(GRADLE_${gradleVersion.version.replace('.', '_')}) >= 0)") {
                        block("if (javaVersion <= ${javaVersion})") {
                            line("return SUPPORTED;")
                        }
                    }
                }

                block("else") {
                    line("return UNKNOWN;")
                }

                line("return UNSUPPORTED;")
            }

            line()
        }
    }
}
