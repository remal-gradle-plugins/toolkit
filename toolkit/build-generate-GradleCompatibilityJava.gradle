import groovy.transform.Immutable
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.util.stream.Stream
import org.gradle.util.GradleVersion

@Immutable(copyWith = true, knownImmutableClasses = [
    GradleVersion
])
class GradleVersionRange implements Comparable<GradleVersionRange> {

    GradleVersion min
    GradleVersion max

    private static final GradleVersion MIN_VERSION = GradleVersion.version('0.0')
    private static final GradleVersion MAX_VERSION = GradleVersion.version('9999.9999')

    @Override
    int compareTo(GradleVersionRange other) {
        int result = (min ?: MIN_VERSION) <=> (other.min ?: MIN_VERSION)
        if (result == 0) {
            result = (max ?: MAX_VERSION) <=> (other.max ?: MAX_VERSION)
        }
        return result
    }

}

generateSources.forMainSourceSet.java {
    String documentationUrl = 'https://docs.gradle.org/current/userguide/compatibility.html'
    outputs.file(project.getCacheFileForDownloadedUrl(documentationUrl)).optional()

    classFile(project.calculateBaseJavaPackage(), 'GradleCompatibilityJava') {
        SortedMap<Integer, GradleVersionRange> compatibilities = new TreeMap<>()
        def documentationDocument = loadHtmlFromUrl(documentationUrl)
        def tableElements = documentationDocument.select('h2#java_runtime + .sectionbody table.tableblock')
        if (tableElements.isEmpty()) {
            throw new GradleException("Table node can't be found")
        }
        def trElements = tableElements.select('tr')
        trElements.forEach { trElement ->
            if (!trElement.select('th').isEmpty()) {
                return
            }

            String javaVersion = trElement.select('td:eq(0)').text()
            if (javaVersion.isEmpty()) {
                throw new GradleException("Java version is empty: $trElement")
            }

            String rangeString = trElement.select('td:eq(2)').text()
            if (rangeString == 'N/A') {
                return
            } else if (rangeString.isEmpty()) {
                throw new GradleException("Gradle version range is empty: $trElement")
            }

            def parseGradleVersion = { String string ->
                string = string.replaceAll(/\*/, '9999')
                while (string.count('.') < 1) {
                    string += '.0'
                }
                return GradleVersion.version(string)
            }

            GradleVersionRange range =
                rangeString.with {
                    Matcher matcher = Pattern.compile(/(?<min>\d+(\.(\d+|\*))+) to (?<max>\d+(\.(\d+|\*))+)/).matcher(it)
                    if (matcher.matches()) {
                        return new GradleVersionRange(
                            min: parseGradleVersion(matcher.group('min')),
                            max: parseGradleVersion(matcher.group('max')),
                        )
                    }
                    return null
                }
                    ?: rangeString.with {
                    Matcher matcher = Pattern.compile(/(?<min>\d+(\.(\d+|\*))+) and after/).matcher(it)
                    if (matcher.matches()) {
                        return new GradleVersionRange(
                            min: parseGradleVersion(matcher.group('min')),
                            max: null,
                        )
                    }
                    return null
                }
                    ?: with { throw new GradleException("Unsupported Gradle version range: $rangeString") }

            compatibilities[javaVersion.toInteger()] = range
        }

        addStaticImport('lombok.AccessLevel', 'PRIVATE')
        addStaticImport("${packageName}.GradleCompatibilityMode", 'SUPPORTED')
        addStaticImport("${packageName}.GradleCompatibilityMode", 'UNKNOWN')
        addStaticImport("${packageName}.GradleCompatibilityMode", 'UNSUPPORTED')

        addImport("lombok.NoArgsConstructor")
        addImport("org.gradle.util.GradleVersion")

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "checkstyle:RightCurly", "java:S3776", "java:S131", "java:S1479")
        block("abstract class ${simpleName}") {
            line()
            compatibilities.values().stream()
                .flatMap { Stream.of(it.min, it.max) }
                .filter { it != null }
                .distinct()
                .sorted()
                .forEach {
                    line("private static final GradleVersion GRADLE_${it.version.replace('.', '_')} = GradleVersion.version(\"${it.version}\");")
                }

            line()
            block("public static GradleCompatibilityMode get(GradleVersion gradleVersion, int javaVersion)") {
                line("gradleVersion = gradleVersion.getBaseVersion();")

                block("if (javaVersion < ${compatibilities.firstKey()})") {
                    line("return UNSUPPORTED;")
                }

                compatibilities.forEach { Integer javaVersion, GradleVersionRange range ->
                    block("else if (javaVersion == $javaVersion)") {
                        List<String> clauses = []
                        if (range.min != null) {
                            clauses.add("gradleVersion.compareTo(GRADLE_${range.min.version.replace('.', '_')}) >= 0")
                        }
                        if (range.max != null) {
                            clauses.add("gradleVersion.compareTo(GRADLE_${range.max.version.replace('.', '_')}) <= 0")
                        }
                        if (clauses.isEmpty()) {
                            throw new GradleException("Java version: $javaVersion: No clauses were defined for range: $range")
                        }
                        block("if (${clauses.join(' && ')})") {
                            line("return SUPPORTED;")
                        }
                        block("else") {
                            line("return UNSUPPORTED;")
                        }
                    }
                }

                block("else") {
                    line("return UNKNOWN;")
                }
            }

            line()
        }
    }
}
